using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Windows.Forms;

namespace PlayStation_Checker_by_Halo
{
	// Token: 0x02000010 RID: 16
	internal class ElementCollection
	{
		// Token: 0x17000023 RID: 35
		// (get) Token: 0x060000DF RID: 223 RVA: 0x000024CA File Offset: 0x000006CA
		public List<CommonHtmlElement> All
		{
			get
			{
				return this.allElements;
			}
		}

		// Token: 0x17000024 RID: 36
		// (get) Token: 0x060000E0 RID: 224 RVA: 0x000024D2 File Offset: 0x000006D2
		// (set) Token: 0x060000E1 RID: 225 RVA: 0x000024DA File Offset: 0x000006DA
		public int MaxWidth { get; private set; }

		// Token: 0x17000025 RID: 37
		// (get) Token: 0x060000E2 RID: 226 RVA: 0x000024E3 File Offset: 0x000006E3
		// (set) Token: 0x060000E3 RID: 227 RVA: 0x000024EB File Offset: 0x000006EB
		public int MaxHeight { get; private set; }

		// Token: 0x17000026 RID: 38
		// (get) Token: 0x060000E4 RID: 228 RVA: 0x000024F4 File Offset: 0x000006F4
		// (set) Token: 0x060000E5 RID: 229 RVA: 0x000024FC File Offset: 0x000006FC
		public Uri Url { get; set; }

		// Token: 0x060000E6 RID: 230 RVA: 0x00002505 File Offset: 0x00000705
		private ElementCollection()
		{
		}

		// Token: 0x060000E7 RID: 231 RVA: 0x0000C008 File Offset: 0x0000A208
		public static ElementCollection CreateFromFullDocument(HtmlDocument document)
		{
			ElementCollection elementCollection = new ElementCollection();
			elementCollection.MaxHeight = document.Body.OffsetRectangle.Bottom;
			elementCollection.MaxWidth = document.Body.OffsetRectangle.Right;
			elementCollection.Url = document.Url;
			for (int i = 0; i < document.Body.OffsetRectangle.Bottom; i += 5)
			{
				for (int j = 0; j < document.Body.OffsetRectangle.Right; j += 5)
				{
					HtmlElement elementFromPoint = document.GetElementFromPoint(new Point(j, i));
					if (string.IsNullOrEmpty(elementFromPoint.Name) && string.IsNullOrEmpty(elementFromPoint.Id))
					{
						Rectangle offsetRectangle = elementFromPoint.OffsetRectangle;
						elementCollection.Add(new CommonHtmlElement(elementFromPoint.GetAttribute("name"), elementFromPoint.GetAttribute("id"), elementFromPoint.GetAttribute("type"), elementFromPoint.TagName.ToLower(), offsetRectangle.Top, offsetRectangle.Bottom, offsetRectangle.Left, offsetRectangle.Right));
					}
					else
					{
						string text = string.IsNullOrEmpty(elementFromPoint.Id) ? elementFromPoint.Name : elementFromPoint.Id;
						int num = (!string.IsNullOrEmpty(elementFromPoint.Id)) ? 1 : 0;
						string[] array = document.InvokeScript("getPoint", new object[]
						{
							text,
							num
						}).ToString().Split(new char[]
						{
							'|'
						});
						elementCollection.Add(new CommonHtmlElement(elementFromPoint.GetAttribute("name"), elementFromPoint.GetAttribute("id"), elementFromPoint.GetAttribute("type"), elementFromPoint.TagName.ToLower(), int.Parse(array[2]), int.Parse(array[3]), int.Parse(array[0]), int.Parse(array[1])));
					}
					Application.DoEvents();
				}
			}
			return elementCollection;
		}

		// Token: 0x060000E8 RID: 232 RVA: 0x0000C20C File Offset: 0x0000A40C
		public void Add(CommonHtmlElement element)
		{
			if (!this.allElements.Contains(element))
			{
				this.allElements.Add(element);
			}
		}

		// Token: 0x060000E9 RID: 233 RVA: 0x0000C238 File Offset: 0x0000A438
		public CommonHtmlElement GetByPoint(int x, int y)
		{
			CommonHtmlElement result;
			try
			{
				IEnumerable<CommonHtmlElement> source = from z in this.allElements
				where x < z.Right && x > z.Left && y < z.Bottom && y > z.Top
				select z;
				List<CommonHtmlElement> list = source.ToList<CommonHtmlElement>();
				if (list.Count > 1 && string.IsNullOrEmpty(list[list.Count - 1].Name) && string.IsNullOrEmpty(list[list.Count - 1].Id) && list[list.Count - 1].TagName != "button" && list[list.Count - 1].TagName != "input" && (list[list.Count - 2].TagName == "input" || list[list.Count - 2].TagName == "button"))
				{
					result = list[list.Count - 2];
				}
				else
				{
					result = ((list.Count > 0) ? list[list.Count - 1] : null);
				}
			}
			catch
			{
				result = null;
			}
			return result;
		}

		// Token: 0x060000EA RID: 234 RVA: 0x0000C390 File Offset: 0x0000A590
		public CommonHtmlElement GetByName(string name)
		{
			IEnumerable<CommonHtmlElement> source = from z in this.allElements
			where name == z.Name
			select z;
			return source.ToList<CommonHtmlElement>()[0];
		}

		// Token: 0x060000EB RID: 235 RVA: 0x0000C3D0 File Offset: 0x0000A5D0
		public CommonHtmlElement GetById(string Id)
		{
			IEnumerable<CommonHtmlElement> source = from z in this.allElements
			where Id == z.Id
			select z;
			return source.ToList<CommonHtmlElement>()[0];
		}

		// Token: 0x060000EC RID: 236 RVA: 0x0000C410 File Offset: 0x0000A610
		public CommonHtmlElement GetByFullElement(HtmlElement element)
		{
			CommonHtmlElement commonHtmlElement = null;
			if (string.IsNullOrEmpty(element.Name) && string.IsNullOrEmpty(element.Id))
			{
				Rectangle offsetRectangle = element.OffsetRectangle;
				commonHtmlElement = new CommonHtmlElement(element.GetAttribute("name"), element.GetAttribute("id"), element.GetAttribute("type"), element.TagName.ToLower(), offsetRectangle.Top, offsetRectangle.Bottom, offsetRectangle.Left, offsetRectangle.Right);
			}
			else
			{
				string text = string.IsNullOrEmpty(element.Id) ? element.Name : element.Id;
				int num = (!string.IsNullOrEmpty(element.Id)) ? 1 : 0;
				string[] array = element.Document.InvokeScript("getPoint", new object[]
				{
					text,
					num
				}).ToString().Split(new char[]
				{
					'|'
				});
				commonHtmlElement = new CommonHtmlElement(element.GetAttribute("name"), element.GetAttribute("id"), element.GetAttribute("type"), element.TagName.ToLower(), int.Parse(array[2]), int.Parse(array[3]), int.Parse(array[0]), int.Parse(array[1]));
			}
			CommonHtmlElement commonHtmlElement2 = null;
			try
			{
				commonHtmlElement2 = this.GetById(commonHtmlElement.Id);
			}
			catch
			{
			}
			CommonHtmlElement result;
			if (commonHtmlElement2 != null)
			{
				result = commonHtmlElement2;
			}
			else
			{
				try
				{
					commonHtmlElement2 = this.GetByName(commonHtmlElement.Name);
				}
				catch
				{
				}
				if (commonHtmlElement2 != null)
				{
					result = commonHtmlElement2;
				}
				else
				{
					try
					{
						commonHtmlElement2 = this.GetByPoint(commonHtmlElement.Right - 2, commonHtmlElement.Bottom - 2);
					}
					catch
					{
					}
					result = commonHtmlElement2;
				}
			}
			return result;
		}

		// Token: 0x060000ED RID: 237 RVA: 0x0000C5DC File Offset: 0x0000A7DC
		public static CommonHtmlElement CreateCommonElementFromFullElement(HtmlElement element)
		{
			CommonHtmlElement result;
			if (string.IsNullOrEmpty(element.Name) && string.IsNullOrEmpty(element.Id))
			{
				Rectangle offsetRectangle = element.OffsetRectangle;
				result = new CommonHtmlElement(element.GetAttribute("name"), element.GetAttribute("id"), element.GetAttribute("type"), element.TagName.ToLower(), offsetRectangle.Top, offsetRectangle.Bottom, offsetRectangle.Left, offsetRectangle.Right);
			}
			else
			{
				string text = string.IsNullOrEmpty(element.Id) ? element.Name : element.Id;
				int num = (!string.IsNullOrEmpty(element.Id)) ? 1 : 0;
				for (;;)
				{
					try
					{
						string[] array = element.Document.InvokeScript("getPoint", new object[]
						{
							text,
							num
						}).ToString().Split(new char[]
						{
							'|'
						});
						result = new CommonHtmlElement(element.GetAttribute("name"), element.GetAttribute("id"), element.GetAttribute("type"), element.TagName.ToLower(), int.Parse(array[2]), int.Parse(array[3]), int.Parse(array[0]), int.Parse(array[1]));
						break;
					}
					catch
					{
						ControlsLink.GetLink().Leecher.InjectScript();
					}
				}
			}
			return result;
		}

		// Token: 0x04000105 RID: 261
		private List<CommonHtmlElement> allElements = new List<CommonHtmlElement>();
	}
}
