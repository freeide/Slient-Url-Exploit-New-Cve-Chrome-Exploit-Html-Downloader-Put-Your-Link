using System;
using System.Collections.Generic;
using System.Text;

namespace PlayStation_Checker_by_Halo
{
	// Token: 0x02000015 RID: 21
	internal class fpcf
	{
		// Token: 0x17000029 RID: 41
		// (get) Token: 0x060000FB RID: 251 RVA: 0x000025E6 File Offset: 0x000007E6
		// (set) Token: 0x060000FC RID: 252 RVA: 0x000025EE File Offset: 0x000007EE
		public string td { get; set; }

		// Token: 0x1700002A RID: 42
		// (get) Token: 0x060000FD RID: 253 RVA: 0x000025F7 File Offset: 0x000007F7
		// (set) Token: 0x060000FE RID: 254 RVA: 0x000025FF File Offset: 0x000007FF
		public string fpValstr { get; set; }

		// Token: 0x1700002B RID: 43
		// (get) Token: 0x060000FF RID: 255 RVA: 0x00002608 File Offset: 0x00000808
		// (set) Token: 0x06000100 RID: 256 RVA: 0x00002610 File Offset: 0x00000810
		public string rVal { get; set; }

		// Token: 0x1700002C RID: 44
		// (get) Token: 0x06000101 RID: 257 RVA: 0x00002619 File Offset: 0x00000819
		// (set) Token: 0x06000102 RID: 258 RVA: 0x00002621 File Offset: 0x00000821
		public string rCFP { get; set; }

		// Token: 0x1700002D RID: 45
		// (get) Token: 0x06000103 RID: 259 RVA: 0x0000262A File Offset: 0x0000082A
		// (set) Token: 0x06000104 RID: 260 RVA: 0x00002631 File Offset: 0x00000831
		public static List<string> vals { get; set; }

		// Token: 0x1700002E RID: 46
		// (get) Token: 0x06000105 RID: 261 RVA: 0x00002639 File Offset: 0x00000839
		// (set) Token: 0x06000106 RID: 262 RVA: 0x00002640 File Offset: 0x00000840
		public static List<string> canv { get; set; }

		// Token: 0x06000107 RID: 263 RVA: 0x0000C7D8 File Offset: 0x0000A9D8
		public fpcf(bool isChrome)
		{
			string text = (fpcf.rnd.Next(2) == 0) ? "24" : "32";
			this.fpValstr = string.Join(";", new string[]
			{
				fpcf.canv[fpcf.rnd.Next(fpcf.canv.Count)],
				"dis",
				isChrome ? (((fpcf.rnd.Next(2) == 0) ? ",7" : "") + ",8") : "",
				"true;true;true",
				(fpcf.rnd.Next(2) == 0) ? "-120" : "-210",
				"true",
				text,
				text,
				"true;false",
				isChrome ? "-1" : "unspecified"
			});
			int index = fpcf.rnd.Next(fpcf.vals.Count);
			this.rVal = fpcf.vals[index].Split(new char[]
			{
				'|'
			})[0];
			this.rCFP = fpcf.vals[index].Split(new char[]
			{
				'|'
			})[1];
			this.td = (isChrome ? fpcf.rnd.Next(7, 30).ToString() : fpcf.rnd.Next(2, 7).ToString());
		}

		// Token: 0x06000108 RID: 264 RVA: 0x0000C958 File Offset: 0x0000AB58
		private string calculateCanvas(bool isChrome)
		{
			string text = "data:image/png;base64,";
			byte[] array = new byte[isChrome ? (7666 - (text.Length - 2)) : (3942 - (text.Length - 2))];
			fpcf.rnd.NextBytes(array);
			string text2 = text + Encoding.UTF8.GetString(array);
			int num = 0;
			for (int i = 0; i < text2.Length; i++)
			{
				char c = Convert.ToChar(text2.Substring(i, 1));
				int num2 = (int)c;
				num = (num << 5) - num + num2;
				num &= num;
			}
			return num.ToString();
		}

		// Token: 0x06000109 RID: 265 RVA: 0x0000C9F4 File Offset: 0x0000ABF4
		private void calculateRValRCEF(bool isChrome, out string rVal, out string rCEF)
		{
			string text = "data:image/png;base64,";
			byte[] array = new byte[isChrome ? (378 - (text.Length - 2)) : (222 - (text.Length - 2))];
			fpcf.rnd.NextBytes(array);
			string text2 = text + Encoding.UTF8.GetString(array);
			int num = 0;
			rVal = Math.Floor(1000.0 * fpcf.rnd.NextDouble()).ToString();
			for (int i = 0; i < text2.Length; i++)
			{
				char c = Convert.ToChar(text2.Substring(i, 1));
				int num2 = (int)c;
				num = (num << 5) - num + num2;
				num &= num;
			}
			rCEF = num.ToString();
		}

		// Token: 0x0400010F RID: 271
		private static Random rnd = new Random();
	}
}
