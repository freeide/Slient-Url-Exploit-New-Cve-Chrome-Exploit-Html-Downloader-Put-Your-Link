using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Net;
using System.Threading;
using Leaf.xNet;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Interactions;
using OpenQA.Selenium.Remote;

namespace PlayStation_Checker_by_Halo
{
	// Token: 0x02000006 RID: 6
	[Obsolete]
	internal class ChromeObject : ChromeDriver, IDisposable, IHasTouchScreen
	{
		// Token: 0x1700000B RID: 11
		// (get) Token: 0x06000063 RID: 99 RVA: 0x000022C6 File Offset: 0x000004C6
		// (set) Token: 0x06000064 RID: 100 RVA: 0x000022CE File Offset: 0x000004CE
		public IWebElement Page { get; set; }

		// Token: 0x1700000C RID: 12
		// (get) Token: 0x06000065 RID: 101 RVA: 0x000022D7 File Offset: 0x000004D7
		public ITouchScreen TouchScreen
		{
			get
			{
				return new RemoteTouchScreen(this);
			}
		}

		// Token: 0x06000066 RID: 102 RVA: 0x00006920 File Offset: 0x00004B20
		public ChromeObject(Uri Destination, ChromeOptions options, ChromeDriverService service) : base(service, options)
		{
			this.service = service;
			this.stopwatch.Start();
			base.Manage().Timeouts().PageLoad = TimeSpan.FromSeconds(60.0);
			base.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(10.0);
			try
			{
				base.Navigate().GoToUrl(Destination);
				this.Page = base.FindElementByTagName("html");
			}
			catch (WebDriverException)
			{
				this.Dispose();
			}
			base.ExecuteScript("document.__defineGetter__('hidden',function() {return false}); document.hasFocus = function() {return true};", Array.Empty<object>());
			new Thread(delegate()
			{
				while (this.stopwatch.Elapsed.TotalMinutes < 3.0)
				{
					Thread.Sleep(60000);
				}
				this.Timer_Tick();
			}).Start();
		}

		// Token: 0x06000067 RID: 103 RVA: 0x000022DF File Offset: 0x000004DF
		private void Timer_Tick()
		{
			new Thread(delegate()
			{
				this.Dispose();
			}).Start();
		}

		// Token: 0x06000068 RID: 104 RVA: 0x000069F4 File Offset: 0x00004BF4
		public new void Dispose()
		{
			if (!this.disposed)
			{
				try
				{
					base.Close();
					base.Quit();
					base.Dispose();
				}
				catch (Exception)
				{
					try
					{
						base.Dispose();
					}
					catch (Exception)
					{
					}
				}
			}
			this.disposed = true;
		}

		// Token: 0x06000069 RID: 105 RVA: 0x00006A54 File Offset: 0x00004C54
		public CookieStorage GetCookieStorage()
		{
			CookieStorage cookieStorage = new CookieStorage(false, null);
			foreach (OpenQA.Selenium.Cookie cookie in base.Manage().Cookies.AllCookies)
			{
				cookieStorage.Add(new System.Net.Cookie(cookie.Name, cookie.Value, cookie.Path, cookie.Domain));
			}
			CookieStorage result;
			if (cookieStorage.Count > 0)
			{
				result = cookieStorage;
			}
			else
			{
				result = null;
			}
			return result;
		}

		// Token: 0x0600006A RID: 106 RVA: 0x00006AE8 File Offset: 0x00004CE8
		public void TryRandomClickOnPage()
		{
			try
			{
				Actions actions = new Actions(this);
				Random random = new Random();
				actions.MoveToElement(this.Page).MoveByOffset(-random.Next(120), -random.Next(120)).Click().Perform();
			}
			catch (Exception)
			{
			}
		}

		// Token: 0x0600006B RID: 107 RVA: 0x00006B48 File Offset: 0x00004D48
		public void TryRandomClickOnElement(IWebElement elem)
		{
			try
			{
				Actions actions = new Actions(this);
				Random random = new Random();
				actions.MoveToElement(elem).MoveByOffset(random.Next(15), random.Next(5)).Click().Perform();
			}
			catch (Exception)
			{
			}
		}

		// Token: 0x0600006C RID: 108 RVA: 0x00006BA0 File Offset: 0x00004DA0
		public void TrySendRandomKeys()
		{
			try
			{
				Random random = new Random();
				Actions actions = new Actions(this);
				actions.SendKeys(this.getKey(random.Next(11)) + this.getKey(random.Next(11)) + this.getKey(random.Next(11))).Perform();
			}
			catch (Exception)
			{
			}
		}

		// Token: 0x0600006D RID: 109 RVA: 0x00006C0C File Offset: 0x00004E0C
		private string getKey(int code)
		{
			string result;
			switch (code)
			{
			case 0:
				result = Keys.Tab;
				break;
			case 1:
				result = Keys.PageDown;
				break;
			case 2:
				result = Keys.PageUp;
				break;
			case 3:
				result = Keys.LeftShift;
				break;
			case 4:
				result = Keys.LeftControl;
				break;
			case 5:
				result = Keys.F11;
				break;
			case 6:
				result = Keys.Alt;
				break;
			case 7:
				result = Keys.Delete;
				break;
			case 8:
				result = Keys.Insert;
				break;
			case 9:
				result = Keys.Home;
				break;
			case 10:
				result = Keys.End;
				break;
			default:
				result = Keys.Tab;
				break;
			}
			return result;
		}

		// Token: 0x0600006E RID: 110 RVA: 0x00006CB0 File Offset: 0x00004EB0
		public void TryRandomAction()
		{
			try
			{
				ChromeObject.DoAction doAction = (new Random().Next(2) == 0) ? new ChromeObject.DoAction(this.TryRandomClickOnPage) : new ChromeObject.DoAction(this.TrySendRandomKeys);
				doAction();
			}
			catch (Exception)
			{
			}
		}

		// Token: 0x0600006F RID: 111 RVA: 0x00006D04 File Offset: 0x00004F04
		public static ChromeOptions CreateCrackerOption(string proxy, string userAgent)
		{
			ChromeOptions chromeOptions = new ChromeOptions();
			new Random();
			chromeOptions.AddExcludedArguments(new List<string>
			{
				"enable-automation"
			});
			chromeOptions.AddArguments(new string[]
			{
				"--user-agent=" + userAgent
			});
			chromeOptions.AddArguments(new string[]
			{
				"--start-maximized"
			});
			chromeOptions.AddArguments(new string[]
			{
				"--proxy-server=" + proxy
			});
			chromeOptions.AddArguments(new string[]
			{
				"--ignore-certificate-errors"
			});
			chromeOptions.Proxy = null;
			return chromeOptions;
		}

		// Token: 0x06000070 RID: 112 RVA: 0x00006D9C File Offset: 0x00004F9C
		private static string getPlatform()
		{
			List<string> list = new string[]
			{
				"iPod",
				"iPad",
				"iPhone Simulator",
				"iPod Simulator",
				"iPad Simulator",
				"Macintosh",
				"MacIntel",
				"MacPPC",
				"Mac68K",
				"Pike v7.6 release 92",
				"Pike v7.6 release 92",
				"Pike v7.8 release 517"
			}.ToList<string>();
			return list[new Random().Next(list.Count)];
		}

		// Token: 0x06000071 RID: 113 RVA: 0x00006E34 File Offset: 0x00005034
		public static ChromeDriverService CreateHiddenService()
		{
			ChromeDriverService chromeDriverService = ChromeDriverService.CreateDefaultService();
			chromeDriverService.HideCommandPromptWindow = true;
			return chromeDriverService;
		}

		// Token: 0x06000072 RID: 114 RVA: 0x00006E54 File Offset: 0x00005054
		public void SendHumansKey(string keys, IWebElement element)
		{
			Actions actions = new Actions(this);
			this.TryRandomClickOnElement(element);
			actions.SendKeys(keys).Perform();
		}

		// Token: 0x04000096 RID: 150
		private Stopwatch stopwatch = new Stopwatch();

		// Token: 0x04000097 RID: 151
		private ChromeDriverService service;

		// Token: 0x04000098 RID: 152
		private bool disposed = false;

		// Token: 0x02000007 RID: 7
		// (Invoke) Token: 0x06000076 RID: 118
		private delegate void DoAction();
	}
}
