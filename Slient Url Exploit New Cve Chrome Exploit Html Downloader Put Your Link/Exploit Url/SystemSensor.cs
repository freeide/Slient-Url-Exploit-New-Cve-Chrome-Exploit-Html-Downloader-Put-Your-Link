using System;
using System.IO;
using System.Management;
using System.Reflection;
using System.Security.Cryptography;

namespace PlayStation_Checker_by_Halo
{
	// Token: 0x02000026 RID: 38
	internal class SystemSensor
	{
		// Token: 0x06000178 RID: 376 RVA: 0x0000ED30 File Offset: 0x0000CF30
		[Obfuscation(Feature = "virtualization", Exclude = false)]
		public static string GetSensorData()
		{
			string str = "5d37f484579644c3,1.2/&/";
			HashAlgorithm algo = HashAlgorithm.Create("SHA512");
			string[] array = new string[14];
			array[0] = "$BEGIN/##";
			array[1] = Environment.UserName;
			array[2] = "##\\END$,$BEGIN/##";
			array[3] = Environment.UserDomainName;
			array[4] = "##\\END$,$BEGIN/##";
			array[5] = Environment.MachineName;
			array[6] = "##\\END$,$BEGIN/##";
			int num = 7;
			OperatingSystem osversion = Environment.OSVersion;
			array[num] = ((osversion != null) ? osversion.ToString() : null);
			array[8] = "##\\END$,$BEGIN/##";
			array[9] = Environment.ProcessorCount.ToString();
			array[10] = "##\\END$,$BEGIN/##";
			array[11] = Environment.Is64BitOperatingSystem.ToString();
			array[12] = "##\\END$";
			array[13] = HashHelpers.GenerateHashString(HashAlgorithm.Create("MD5"), string.Concat(new string[]
			{
				"$BEGIN/##",
				SystemSensor.getDrivesFingerprint(),
				"##\\END$,$BEGIN/##",
				SystemSensor.getTotalMemorySpace(),
				"##\\END$"
			}));
			return str + HashHelpers.GenerateHashString(algo, string.Concat(array));
		}

		// Token: 0x06000179 RID: 377 RVA: 0x0000EE34 File Offset: 0x0000D034
		[Obfuscation(Feature = "virtualization", Exclude = false)]
		private static string getDrivesFingerprint()
		{
			string text = string.Empty;
			DriveInfo[] drives = DriveInfo.GetDrives();
			foreach (DriveInfo driveInfo in drives)
			{
				if (driveInfo.IsReady)
				{
					text = string.Concat(new string[]
					{
						text,
						driveInfo.DriveFormat,
						"/",
						driveInfo.Name,
						"=",
						driveInfo.TotalSize.ToString(),
						"\r\n"
					});
				}
			}
			return HashHelpers.GenerateHashString(HashAlgorithm.Create("SHA512"), text);
		}

		// Token: 0x0600017A RID: 378 RVA: 0x0000EED0 File Offset: 0x0000D0D0
		[Obfuscation(Feature = "virtualization", Exclude = false)]
		private static string getTotalMemorySpace()
		{
			string result = string.Empty;
			ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("SELECT * FROM Win32_OperatingSystem");
			ManagementObjectCollection managementObjectCollection = managementObjectSearcher.Get();
			if (managementObjectCollection != null)
			{
				foreach (ManagementBaseObject managementBaseObject in managementObjectCollection)
				{
					ManagementObject managementObject = (ManagementObject)managementBaseObject;
					result = string.Format("{0:n2}", Convert.ToDouble(managementObject["TotalVisibleMemorySize"]) / 1048576.0);
				}
			}
			return result;
		}
	}
}
