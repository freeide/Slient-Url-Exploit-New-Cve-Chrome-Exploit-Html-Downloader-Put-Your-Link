using System;
using System.Collections.Generic;

namespace PlayStation_Checker_by_Halo
{
	// Token: 0x02000024 RID: 36
	public class Sensor : IEquatable<Sensor>, IComparable<Sensor>
	{
		// Token: 0x17000049 RID: 73
		// (get) Token: 0x06000162 RID: 354 RVA: 0x00002A26 File Offset: 0x00000C26
		// (set) Token: 0x06000163 RID: 355 RVA: 0x00002A2E File Offset: 0x00000C2E
		public int TotalUses { get; set; }

		// Token: 0x06000164 RID: 356 RVA: 0x00002A37 File Offset: 0x00000C37
		public Sensor(string sensor)
		{
			this.sensor = sensor;
		}

		// Token: 0x06000165 RID: 357 RVA: 0x0000EAB0 File Offset: 0x0000CCB0
		public string GetSensorString(bool force)
		{
			int num = 5;
			string result;
			if (!force && this.TotalUses > num)
			{
				result = "NOMORE";
			}
			else
			{
				result = this.sensor;
			}
			return result;
		}

		// Token: 0x06000166 RID: 358 RVA: 0x0000EAE0 File Offset: 0x0000CCE0
		public static bool isValid(string sensor)
		{
			bool flag = sensor.Contains("~-1~-1~-1") || sensor.Contains("~0~-1~-1") || sensor.Contains("-2~-1");
			bool flag2 = !sensor.Contains("==");
			bool flag3 = !sensor.Contains("||");
			return flag && flag2 && flag3;
		}

		// Token: 0x06000167 RID: 359 RVA: 0x0000EB3C File Offset: 0x0000CD3C
		public static Sensor GetRandomFromList(List<Sensor> sensors)
		{
			Sensor sensor2;
			for (;;)
			{
				if (sensors.Count <= 5 & !Sensor.refreshing)
				{
					if (Sensor.refreshed >= 3)
					{
						break;
					}
					Sensor.refreshing = true;
					UCSettings._cracker.Sensors.Clear();
					foreach (Sensor sensor in UCSettings._cracker.SensorsTemp)
					{
						UCSettings._cracker.Sensors.Add(new Sensor(sensor.GetSensorString(true)));
					}
					Sensor.refreshing = false;
					Sensor.refreshed++;
				}
				sensors.Sort();
				sensor2 = sensors[0];
				string sensorString = sensor2.GetSensorString(false);
				if (!string.IsNullOrEmpty(sensorString) && !(sensorString == "NOMORE"))
				{
					goto IL_FF;
				}
				sensors.Remove(sensor2);
			}
			return new Sensor("STOP");
			IL_FF:
			Sensor sensor3 = sensor2;
			int totalUses = sensor3.TotalUses;
			sensor3.TotalUses = totalUses + 1;
			return sensor2;
		}

		// Token: 0x06000168 RID: 360 RVA: 0x0000EC70 File Offset: 0x0000CE70
		public bool Equals(Sensor other)
		{
			return base.Equals(other);
		}

		// Token: 0x06000169 RID: 361 RVA: 0x0000EC84 File Offset: 0x0000CE84
		public override bool Equals(object obj)
		{
			Sensor sensor = (Sensor)obj;
			return this.sensor == sensor.sensor;
		}

		// Token: 0x0600016A RID: 362 RVA: 0x0000ECAC File Offset: 0x0000CEAC
		public override int GetHashCode()
		{
			return -165900109 + EqualityComparer<string>.Default.GetHashCode(this.sensor);
		}

		// Token: 0x0600016B RID: 363 RVA: 0x0000ECD4 File Offset: 0x0000CED4
		public int CompareTo(Sensor other)
		{
			int result;
			try
			{
				result = this.TotalUses - other.TotalUses;
			}
			catch
			{
				result = -1;
			}
			return result;
		}

		// Token: 0x0600016C RID: 364 RVA: 0x0000ED08 File Offset: 0x0000CF08
		public override string ToString()
		{
			return "Total Uses: " + this.TotalUses.ToString();
		}

		// Token: 0x0400015C RID: 348
		public static int refreshed = 0;

		// Token: 0x0400015D RID: 349
		private string sensor = string.Empty;

		// Token: 0x0400015E RID: 350
		private static Random random = new Random();

		// Token: 0x0400015F RID: 351
		private static bool refreshing = false;
	}
}
