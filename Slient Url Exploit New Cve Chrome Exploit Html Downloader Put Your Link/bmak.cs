using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Net;
using Leaf.xNet;

namespace PlayStation_Checker_by_Halo
{
	// Token: 0x02000005 RID: 5
	internal class bmak
	{
		// Token: 0x17000007 RID: 7
		// (get) Token: 0x06000026 RID: 38 RVA: 0x00003758 File Offset: 0x00001958
		// (set) Token: 0x06000027 RID: 39 RVA: 0x00003770 File Offset: 0x00001970
		public long lasttime
		{
			get
			{
				return this.ltval;
			}
			set
			{
				this.ltval = value;
				if (this.get_cf_date(true) - (double)this.start_ts > 5400.0 && !this.g1)
				{
					this.getmr();
					this.g1 = true;
				}
				if (this.get_cf_date(true) - (double)this.start_ts > 10400.0 && !this.g2)
				{
					this.getmr();
					this.g2 = true;
				}
			}
		}

		// Token: 0x17000008 RID: 8
		// (get) Token: 0x06000028 RID: 40 RVA: 0x000021A5 File Offset: 0x000003A5
		// (set) Token: 0x06000029 RID: 41 RVA: 0x000021AD File Offset: 0x000003AD
		public Cookie Cookie { get; private set; }

		// Token: 0x17000009 RID: 9
		// (get) Token: 0x0600002A RID: 42 RVA: 0x000021B6 File Offset: 0x000003B6
		// (set) Token: 0x0600002B RID: 43 RVA: 0x000021BE File Offset: 0x000003BE
		public HttpRequest Request { get; private set; }

		// Token: 0x1700000A RID: 10
		// (get) Token: 0x0600002C RID: 44 RVA: 0x000021C7 File Offset: 0x000003C7
		// (set) Token: 0x0600002D RID: 45 RVA: 0x000021CF File Offset: 0x000003CF
		public HttpResponse Response { get; set; }

		// Token: 0x0600002E RID: 46 RVA: 0x000037E8 File Offset: 0x000019E8
		public bmak(HttpRequest request, HttpResponse response, HtmlDocumentPointer pointer)
		{
			this.Request = request;
			this.Response = response;
			this.Cookie = response.Cookies.GetCookies(GeneratorStaticDependencies.HtmlDocument.Url.OriginalString)["_abck"];
			this.ir();
			this.t_tst = this.get_cf_date(false);
			this.doadma_en = 1;
			this.doa_throttle = 0;
			this.dma_throttle = 0;
			this.to();
			this.rve();
			this.fpcf.fpValstr = "-1";
			this.fpcf.rVal = "-1";
			this.fpcf.rCFP = "-1";
			this.fpcf.td = "-999999";
			if (this.js_post)
			{
				this.aj_type = 0;
				this.bpd();
				this.lasttime += (long)bmak.rnd.Next(30, 60);
				this.hf(false);
				this.hf(false);
				this.lasttime = 0L;
				this.pd();
			}
			this.tst = this.get_cf_date(false) - this.t_tst;
			int num = bmak.rnd.Next(5);
			int num2 = num;
			if (num2 != 1)
			{
				if (num2 == 2)
				{
					this.lasttime += (long)bmak.rnd.Next(10, 50);
					this.cdma();
					this.cdoa();
				}
			}
			else
			{
				Actions.MoveMouse(this, pointer, pointer.X + bmak.rnd.Next(1, 5), pointer.Y + bmak.rnd.Next(1, 5));
			}
			this.fpcf = fpcfCollection.GetRandomfpcf(this.navigator.IsChrome);
			if (this.js_post)
			{
				this.aj_type = 9;
				this.bpd();
				this.pd();
			}
			this.lasttime += 300L;
			this.getmr();
			this.lasttime += 2000L;
		}

		// Token: 0x0600002F RID: 47 RVA: 0x000021D8 File Offset: 0x000003D8
		private void rve()
		{
			this.hn = "hidden";
			this.vc = "visibilitychange";
		}

		// Token: 0x06000030 RID: 48 RVA: 0x00003E9C File Offset: 0x0000209C
		private void ir()
		{
			this.start_ts = Convert.ToInt64(DateTime.UtcNow.Subtract(new DateTime(1970, 1, 1)).TotalMilliseconds);
			this.kact = "";
			this.ke_cnt = 0;
			this.ke_vel = 0.0;
			this.mact = "";
			this.mme_cnt = 0;
			this.mduce_cnt = 0;
			this.me_vel = 0.0;
			this.pact = "";
			this.pme_cnt = 0;
			this.pduce_cnt = 0;
			this.pe_vel = 0;
			this.tact = "";
			this.tme_cnt = 0;
			this.tduce_cnt = 0;
			this.te_vel = 0;
			this.doact = "";
			this.doe_cnt = 0;
			this.doe_vel = 0.0;
			this.dmact = "";
			this.dme_cnt = 0;
			this.dme_vel = 0.0;
			this.vcact = "";
			this.vc_cnt = 0;
			this.aj_indx = 0;
			this.aj_ss = 0;
			this.aj_type = -1;
			this.aj_indx_doact = 0;
			this.aj_indx_dmact = 0;
			this.aj_indx_tact = 0;
			this.me_cnt = 0;
			this.pe_cnt = 0;
			this.te_cnt = 0;
		}

		// Token: 0x06000031 RID: 49 RVA: 0x00003FF4 File Offset: 0x000021F4
		private double get_cf_date(bool bypassTime = true)
		{
			double result;
			if (bypassTime)
			{
				result = Math.Floor(DateTime.UtcNow.Subtract(new DateTime(1970, 1, 1)).TotalMilliseconds) + (double)this.lasttime;
			}
			else
			{
				result = Math.Floor(DateTime.UtcNow.Subtract(new DateTime(1970, 1, 1)).TotalMilliseconds);
			}
			return result;
		}

		// Token: 0x06000032 RID: 50 RVA: 0x00004060 File Offset: 0x00002260
		private void sd_debug(string a)
		{
			if (!this.js_post)
			{
				this._sd_trace += a;
			}
		}

		// Token: 0x06000033 RID: 51 RVA: 0x0000408C File Offset: 0x0000228C
		private double pi(double a)
		{
			return Math.Floor(a);
		}

		// Token: 0x06000034 RID: 52 RVA: 0x000040A4 File Offset: 0x000022A4
		private string uar()
		{
			return this.navigator.UserAgent;
		}

		// Token: 0x06000035 RID: 53 RVA: 0x000040C0 File Offset: 0x000022C0
		private string gd()
		{
			string text = this.uar();
			string text2 = this.ab(text).ToString();
			double num = (double)(this.start_ts / 2L);
			int num2 = 1366;
			int num3 = 738;
			int num4 = 1366;
			int num5 = 768;
			int num6 = 1366;
			int num7 = 664;
			int num8 = 1382;
			this.z1 = this.pi((double)this.start_ts / (this.y1 * this.y1));
			double num9 = double.Parse("0." + bmak.generateLongRandom(100000000000000L, 999999999999999L).ToString());
			int num10 = Convert.ToInt32(1000.0 * num9 / 2.0);
			string text3 = num9.ToString() + bmak.rnd.Next(100000, 999999).ToString() + bmak.rnd.Next(100000, 999999).ToString();
			text3 = text3.Substring(0, 11) + num10.ToString();
			this.get_browser();
			this.bc();
			this.bmisc();
			return string.Concat(new string[]
			{
				text,
				",uaend,",
				this.xagg.ToString(),
				",",
				this.psub,
				",",
				this.lang,
				",",
				this.prod,
				",",
				this.plen.ToString(),
				",",
				this.pen.ToString(),
				",",
				this.wen.ToString(),
				",",
				this.den.ToString(),
				",",
				this.z1.ToString(),
				",",
				this.d3.ToString(),
				",",
				num2.ToString(),
				",",
				num3.ToString(),
				",",
				num4.ToString(),
				",",
				num5.ToString(),
				",",
				num6.ToString(),
				",",
				num7.ToString(),
				",",
				num8.ToString(),
				",",
				this.bd(),
				",",
				text2,
				",",
				text3,
				",",
				num.ToString(),
				",loc:",
				this.loc
			});
		}

		// Token: 0x06000036 RID: 54 RVA: 0x000043D8 File Offset: 0x000025D8
		public static long generateLongRandom(long min, long max)
		{
			byte[] array = new byte[8];
			bmak.rnd.NextBytes(array);
			long num = BitConverter.ToInt64(array, 0);
			return Math.Abs(num % (max - min)) + min;
		}

		// Token: 0x06000037 RID: 55 RVA: 0x000021F0 File Offset: 0x000003F0
		private void get_browser()
		{
			this.psub = this.navigator.ProductSub;
			this.lang = "en-US";
			this.prod = "Gecko";
			this.plen = this.navigator.PluginsLength;
		}

		// Token: 0x06000038 RID: 56 RVA: 0x00004410 File Offset: 0x00002610
		private void bc()
		{
			int num = Convert.ToInt32(this.navigator.Touch);
			int num2 = Convert.ToInt32(this.navigator.IsChrome);
			this.xagg = 51 + (num << 6) + 0 + 256 + 512 + (num2 << 10) + 2048 + 0 + 8192;
		}

		// Token: 0x06000039 RID: 57 RVA: 0x0000222A File Offset: 0x0000042A
		private void bmisc()
		{
			this.pen = 0;
			this.wen = 0;
			this.den = 0;
		}

		// Token: 0x0600003A RID: 58 RVA: 0x00004470 File Offset: 0x00002670
		private string bd()
		{
			List<string> list = new List<string>();
			list.Add(",cpen:" + 0.ToString());
			list.Add("i1:" + 0.ToString());
			list.Add("dm:" + 0.ToString());
			list.Add("cwen:" + (this.navigator.IsChrome ? bmak.rnd.Next(2) : 0).ToString());
			list.Add("non:" + 1.ToString());
			list.Add("opc:" + 0.ToString());
			list.Add("fc:" + 0.ToString());
			list.Add("sc:" + 0.ToString());
			list.Add("wrc:" + 1.ToString());
			list.Add("isc:" + 0.ToString());
			this.d2 = this.pi(this.z1 / 23.0);
			list.Add("vib:" + 1.ToString());
			list.Add("bat:" + bmak.rnd.Next(2).ToString());
			list.Add("x11:" + 0.ToString());
			list.Add("x12:" + 1.ToString());
			return string.Join(",", list);
		}

		// Token: 0x0600003B RID: 59 RVA: 0x00004630 File Offset: 0x00002830
		private int fas()
		{
			return Convert.ToInt32(true) + (Convert.ToInt32(false) << 1) + (Convert.ToInt32(bmak.rnd.Next(2) != 0) << 2) + (Convert.ToInt32(true) << 3) + (Convert.ToInt32(true) << 4) + (Convert.ToInt32(true) << 5) + (Convert.ToInt32(false) << 6) + (Convert.ToInt32(true) << 7) + (Convert.ToInt32(true) << 8) + (Convert.ToInt32(false) << 9) + (Convert.ToInt32(false) << 10) + (Convert.ToInt32(false) << 11) + (Convert.ToInt32(false) << 12) + (Convert.ToInt32(false) << 13) + (Convert.ToInt32(true) << 14) + (Convert.ToInt32(true) << 15) + (Convert.ToInt32(true) << 16) + (Convert.ToInt32(false) << 17) + (Convert.ToInt32(true) << 18) + (Convert.ToInt32(true) << 19) + (Convert.ToInt32(false) << 20) + (Convert.ToInt32(false) << 21) + (Convert.ToInt32(false) << 22) + (Convert.ToInt32(true) << 23) + (Convert.ToInt32(true) << 24);
		}

		// Token: 0x0600003C RID: 60 RVA: 0x00004740 File Offset: 0x00002940
		private void getmr()
		{
			bmak.MR++;
			for (;;)
			{
				try
				{
					if (bmak.MR % 40 == 0)
					{
						this.mr = "0,0,0,0,0,0,0,0,0,0,0,0,0,0";
					}
					else if (bmak.MR % 100 == 0)
					{
						this.mr = "exception";
					}
					else if (bmak.MR % 150 == 0)
					{
						this.mr = "undef";
					}
					else if (bmak.MR % 15 == 0)
					{
						this.mr = string.Concat(new string[]
						{
							bmak.MRGenerator(0, 15, 1, 1, 0, 0),
							",",
							bmak.MRGenerator(1, 15, 1, 1, 1, 0),
							",",
							bmak.MRGenerator(1, 15, 0, 0, 0, 0),
							",",
							bmak.MRGenerator(1, 10, 1, 0, 0, 0),
							",",
							bmak.MRGenerator(1, 12, 0, 0, 0, 0),
							",",
							bmak.MRGenerator(1, 10, 2, 0, 0, 0),
							",",
							bmak.MRGenerator(1, 9, 2, 0, 0, 0),
							",",
							bmak.MRGenerator(2, 13, 0, 0, 0, 0),
							",",
							bmak.MRGenerator(2, 12, 1, 0, 0, 0),
							",",
							bmak.MRGenerator(2, 9, 1, 0, 0, 0),
							",",
							bmak.MRGenerator(12, 1, 0, 0, 0, 0),
							",",
							bmak.MRGenerator(2, 9, 0, 0, 0, 0),
							",",
							bmak.MRGenerator(0, 2, 4, 0, 0, 0),
							",",
							bmak.MRGenerator(0, 3, 3, 2, 0, 0),
							","
						});
					}
					else
					{
						string[][] array = new string[][]
						{
							new string[]
							{
								"0.0",
								"0.1224489806562054"
							},
							new string[]
							{
								"0.0",
								"1.959183673868526"
							},
							new string[]
							{
								"0.0",
								"0.16326530556175478"
							},
							new string[]
							{
								"0.0",
								"0.12244897946829394"
							},
							new string[]
							{
								"0.0",
								"0.4081632656862541"
							},
							new string[]
							{
								"0.0",
								"0.14285714251502435"
							},
							new string[]
							{
								"0.08163265218692166",
								"1.7959183683067712"
							},
							new string[]
							{
								"0.0",
								"0.6122448973414697"
							},
							new string[]
							{
								"0.0",
								"1.9387755096338841"
							},
							new string[]
							{
								"0.0",
								"0.08163265337483311"
							},
							new string[]
							{
								"0.0",
								"0.1428571437029358"
							},
							new string[]
							{
								"0.020408163046730415",
								"0.8367346932313272"
							},
							new string[]
							{
								"0.020408163046730415",
								"1.8979591847283348"
							},
							new string[]
							{
								"2.326530612273408",
								"4.51020408084388"
							}
						};
						List<string> list = new List<string>();
						Stopwatch stopwatch = new Stopwatch();
						stopwatch.Restart();
						string str = string.Empty;
						int num = 1000;
						int num2 = bmak.rnd.Next(1, 5);
						for (int i = 0; i < 14; i++)
						{
							array[i][0] = (double.Parse(array[i][0]) * (double)num2).ToString();
							array[i][1] = (double.Parse(array[i][1]) * (double)num2).ToString();
							if (array[i][0] == "0")
							{
								array[i][0] = "0.0";
							}
							if (array[i][1] == "0")
							{
								array[i][1] = "0.0";
							}
						}
						int j = 0;
						while (j < 14)
						{
							int num3;
							switch (j)
							{
							case 1:
							case 2:
							case 5:
								num3 = Convert.ToInt32(list[0].Split(new char[]
								{
									'.'
								})[0]);
								break;
							case 3:
							case 6:
							case 8:
							case 9:
							case 10:
								goto IL_4CC;
							case 4:
								num3 = Convert.ToInt32(list[2].Split(new char[]
								{
									'.'
								})[0]);
								break;
							case 7:
								num3 = Convert.ToInt32(list[4].Split(new char[]
								{
									'.'
								})[0]);
								break;
							case 11:
								num3 = Convert.ToInt32(list[7].Split(new char[]
								{
									'.'
								})[0]);
								break;
							default:
								goto IL_4CC;
							}
							IL_50F:
							int num4 = num3;
							long num5;
							switch (j)
							{
							case 1:
							case 2:
							case 5:
								num5 = Convert.ToInt64(list[0].Split(new char[]
								{
									'.'
								})[1]);
								break;
							case 3:
							case 6:
							case 8:
							case 9:
							case 10:
								goto IL_5BE;
							case 4:
								num5 = Convert.ToInt64(list[2].Split(new char[]
								{
									'.'
								})[1]);
								break;
							case 7:
								num5 = Convert.ToInt64(list[4].Split(new char[]
								{
									'.'
								})[1]);
								break;
							case 11:
								num5 = Convert.ToInt64(list[7].Split(new char[]
								{
									'.'
								})[1]);
								break;
							default:
								goto IL_5BE;
							}
							IL_601:
							long num6 = num5;
							int num7;
							switch (j)
							{
							case 5:
								num7 = Convert.ToInt32(list[2].Split(new char[]
								{
									'.'
								})[0]);
								break;
							case 6:
								num7 = Convert.ToInt32(list[1].Split(new char[]
								{
									'.'
								})[0]);
								break;
							case 7:
								num7 = Convert.ToInt32(list[6].Split(new char[]
								{
									'.'
								})[0]);
								break;
							case 8:
								goto IL_698;
							case 9:
								Convert.ToInt32(list[3].Split(new char[]
								{
									'.'
								})[0]);
								num7 = 0;
								break;
							default:
								goto IL_698;
							}
							IL_6DD:
							int num8 = num7;
							long num9;
							switch (j)
							{
							case 5:
								num9 = Convert.ToInt64(list[2].Split(new char[]
								{
									'.'
								})[1]);
								break;
							case 6:
								num9 = Convert.ToInt64(list[1].Split(new char[]
								{
									'.'
								})[1]);
								break;
							case 7:
								num9 = Convert.ToInt64(list[6].Split(new char[]
								{
									'.'
								})[1]);
								break;
							case 8:
								goto IL_774;
							case 9:
								Convert.ToInt64(list[3].Split(new char[]
								{
									'.'
								})[1]);
								num9 = 0L;
								break;
							default:
								goto IL_774;
							}
							IL_7C1:
							long num10 = num9;
							if (double.Parse(num4.ToString() + "." + num6.ToString()) > double.Parse(num8.ToString() + "." + num10.ToString()))
							{
								long num11 = num6;
								num6 = num10 - 1L;
								if (double.Parse(num4.ToString() + "." + num6.ToString()) > double.Parse(num8.ToString() + "." + num10.ToString()))
								{
									num4--;
									num6 = num11;
								}
							}
							if (num6 > num10)
							{
								num6 = bmak.generateLongRandom(0L, num10);
							}
							int num12 = j;
							int num13 = num12;
							double num14;
							if (num13 != 3)
							{
								switch (num13)
								{
								case 8:
									num14 = double.Parse(list[1]) - bmak.rnd.NextDouble() * 0.0;
									goto IL_985;
								case 10:
									num14 = double.Parse(list[5]) + bmak.rnd.NextDouble() * 0.0;
									goto IL_985;
								case 12:
									num14 = double.Parse(list[1]) - bmak.rnd.NextDouble();
									goto IL_985;
								}
								num14 = double.Parse((bmak.rnd.Next(num4, num8 + 1).ToString() + "." + bmak.generateLongRandom(num6, num10 + 1L).ToString()).ToString());
							}
							else
							{
								num14 = double.Parse(list[0]) - bmak.rnd.NextDouble() * 0.0;
							}
							IL_985:
							double num15 = num14;
							list.Add(num15.ToString());
							List<double> list2 = new List<double>();
							double num16 = 0.0;
							long elapsedMilliseconds = stopwatch.ElapsedMilliseconds;
							int num17 = 0;
							while (num17 < num && num16 < 0.6)
							{
								double num18 = stopwatch.Elapsed.TotalMilliseconds - num15;
								double totalMilliseconds = stopwatch.Elapsed.TotalMilliseconds;
								list2.Add(Math.Round(1000.0 * (totalMilliseconds - num18)));
								num16 = 1.0;
								num17++;
							}
							list2.Sort();
							List<double> list3 = list2;
							str = str + Convert.ToInt32(list3[Convert.ToInt32(Math.Floor((double)list3.Count / 2.0))] / 5.0).ToString() + ",";
							j++;
							continue;
							IL_774:
							num9 = Convert.ToInt64(array[j][1].Split(new char[]
							{
								'.'
							})[1]);
							goto IL_7C1;
							IL_698:
							num7 = Convert.ToInt32(array[j][1].Split(new char[]
							{
								'.'
							})[0]);
							goto IL_6DD;
							IL_5BE:
							num5 = Convert.ToInt64(array[j][0].Split(new char[]
							{
								'.'
							})[1]);
							goto IL_601;
							IL_4CC:
							num3 = Convert.ToInt32(array[j][0].Split(new char[]
							{
								'.'
							})[0]);
							goto IL_50F;
						}
						this.mr = str;
					}
					break;
				}
				catch (Exception)
				{
				}
			}
		}

		// Token: 0x0600003D RID: 61 RVA: 0x00005208 File Offset: 0x00003408
		private static string MRGenerator(int Possibility0, int Possibility200, int Possibility400 = 0, int Possibility600 = 0, int Possibility1400 = 0, int Possibility1600 = 0)
		{
			int num = Possibility0 + Possibility200 + Possibility400 + Possibility600 + Possibility1400 + Possibility1600;
			int num2 = bmak.rnd.Next(num + 1);
			string result;
			if (num2 <= Possibility0)
			{
				result = "0";
			}
			else if (num2 <= Possibility200 + Possibility0)
			{
				result = "200";
			}
			else if (num2 <= Possibility400 + Possibility200 + Possibility0)
			{
				result = "400";
			}
			else if (num2 <= Possibility600 + Possibility400 + Possibility200 + Possibility0)
			{
				result = "600";
			}
			else if (num2 <= Possibility1400 + Possibility600 + Possibility400 + Possibility200 + Possibility0)
			{
				result = "1400";
			}
			else if (num2 <= Possibility1600 + Possibility1400 + Possibility600 + Possibility400 + Possibility200 + Possibility0)
			{
				result = "1600";
			}
			else
			{
				result = "0";
			}
			return result;
		}

		// Token: 0x0600003E RID: 62 RVA: 0x000052CC File Offset: 0x000034CC
		private string sed()
		{
			string text = "1";
			string text2 = "0";
			string text3 = "0";
			string text4 = "0";
			string text5 = "1";
			string text6 = "0";
			string text7 = "0";
			return string.Join(",", new string[]
			{
				text,
				text2,
				text3,
				text4,
				text5,
				text6,
				text7
			});
		}

		// Token: 0x0600003F RID: 63 RVA: 0x0000533C File Offset: 0x0000353C
		private string cc(int a)
		{
			int num = a % 4;
			num = ((num == 2) ? 3 : num);
			int value = 42 + num;
			return Convert.ToChar(value).ToString();
		}

		// Token: 0x06000040 RID: 64 RVA: 0x0000536C File Offset: 0x0000356C
		private string ff(int a)
		{
			return Convert.ToChar(a).ToString();
		}

		// Token: 0x06000041 RID: 65 RVA: 0x0000538C File Offset: 0x0000358C
		private double x2()
		{
			return this.get_cf_date(true);
		}

		// Token: 0x06000042 RID: 66 RVA: 0x000053A4 File Offset: 0x000035A4
		private void to()
		{
			double num = this.d3 = this.x2() % 10000000.0;
			string text = string.Empty;
			double num2 = 0.0;
			for (int i = 0; i < 5; i++)
			{
				double num3 = this.pi(num / Math.Pow(10.0, (double)i)) % 10.0;
				num2 = num3 + 1.0;
				text = this.cc(Convert.ToInt32(Math.Floor(num3).ToString()));
			}
			string text2 = text;
			string text3 = text2;
			if (text3 != null)
			{
				if (text3 == "+")
				{
					this.o9 = num + num2;
					return;
				}
				if (text3 == "/")
				{
					this.o9 = num / num2;
					return;
				}
				if (text3 == "*")
				{
					this.o9 = num * num2;
					return;
				}
			}
			this.o9 = num - num2;
		}

		// Token: 0x06000043 RID: 67 RVA: 0x0000549C File Offset: 0x0000369C
		private long ab(string val)
		{
			long num = 0L;
			foreach (char c in val)
			{
				if (c < '\u0080')
				{
					num += (long)((ulong)c);
				}
			}
			return num;
		}

		// Token: 0x06000044 RID: 68 RVA: 0x000054E4 File Offset: 0x000036E4
		private int get_type(string a)
		{
			a = a.ToLower();
			return ("text" == a || "search" == a || "url" == a || "email" == a || "tel" == a || "number" == a) ? 0 : (("password" == a) ? 1 : 2);
		}

		// Token: 0x06000045 RID: 69 RVA: 0x00005560 File Offset: 0x00003760
		private bool chknull(object a)
		{
			return a == null;
		}

		// Token: 0x06000046 RID: 70 RVA: 0x00005574 File Offset: 0x00003774
		private double updatet()
		{
			return this.get_cf_date(true) - (double)this.start_ts;
		}

		// Token: 0x06000047 RID: 71 RVA: 0x00005594 File Offset: 0x00003794
		private string getdurl()
		{
			string result;
			if (this.enReadDocUrl == 1)
			{
				result = GeneratorStaticDependencies.HtmlDocument.Url.OriginalString;
			}
			else
			{
				result = "";
			}
			return result;
		}

		// Token: 0x06000048 RID: 72 RVA: 0x000055C8 File Offset: 0x000037C8
		private string DecimalToArbitrarySystem(long decimalNumber, int radix)
		{
			string text = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ".ToLower();
			if (radix >= 2 && radix <= text.Length)
			{
				string result;
				if (decimalNumber == 0L)
				{
					result = "0";
				}
				else
				{
					int num = 63;
					long num2 = Math.Abs(decimalNumber);
					char[] array = new char[64];
					while (num2 != 0L)
					{
						int index = (int)(num2 % (long)radix);
						array[num--] = text[index];
						num2 /= (long)radix;
					}
					string text2 = new string(array, num + 1, 64 - num - 1);
					if (decimalNumber < 0L)
					{
						text2 = "-" + text2;
					}
					result = text2;
				}
				return result;
			}
			throw new ArgumentException("The radix must be >= 2 and <= " + text.Length.ToString());
		}

		// Token: 0x06000049 RID: 73 RVA: 0x000056A0 File Offset: 0x000038A0
		private string x1()
		{
			return this.DecimalToArbitrarySystem(Convert.ToInt64(Math.Floor(16777216.0 * (1.0 + bmak.rnd.NextDouble()))), 36);
		}

		// Token: 0x0600004A RID: 74 RVA: 0x000056E0 File Offset: 0x000038E0
		private string od(string a, string t)
		{
			List<string> list = new List<string>();
			int length = t.Length;
			if (length > 0)
			{
				for (int i = 0; i < a.Length; i++)
				{
					int num = (int)Convert.ToChar(a.Substring(i, 1));
					string item = a.Substring(i, 1);
					int n = (int)Convert.ToChar(t.Substring(i % length, 1));
					num = this.rir(num, 47, 57, n);
					if (num != Convert.ToInt32(Convert.ToChar(a.Substring(i, 1))))
					{
						item = ((char)num).ToString();
					}
					list.Add(item);
				}
			}
			return (list.Count > 0) ? string.Concat(list) : a;
		}

		// Token: 0x0600004B RID: 75 RVA: 0x00005794 File Offset: 0x00003994
		private string getforminfo()
		{
			string result;
			if (!this.infGottenE && !this.infGottenP)
			{
				result = "0,0,0,0,1964,1065,0;1,0,0,0,2090,1084,0;";
			}
			else if (this.infGottenE && !this.infGottenP)
			{
				result = "0,0,1,0,1964,1065,0;1,0,0,0,2090,1084,0;";
			}
			else if (!this.infGottenE && this.infGottenP)
			{
				result = "0,0,0,0,1964,1065,0;1,0,1,0,2090,1084,0;";
			}
			else
			{
				result = "0,0,1,0,1964,1065,0;1,0,1,0,2090,1084,0;";
			}
			return result;
		}

		// Token: 0x0600004C RID: 76 RVA: 0x000057F8 File Offset: 0x000039F8
		private int rir(int a, int t, int e, int n)
		{
			if (a > t && a <= e && (a += n % (e - t)) > e)
			{
				a = a - e + t;
			}
			return a;
		}

		// Token: 0x0600004D RID: 77 RVA: 0x00005828 File Offset: 0x00003A28
		private void cma(MouseEnentArgs a, int t)
		{
			if ((1 == t && this.mme_cnt < this.mme_cnt_lmt) || (1 != t && this.mduce_cnt < this.mduce_cnt_lmt))
			{
				double num = Math.Floor((double)a.pageX);
				double num2 = Math.Floor((double)a.pageY);
				CommonHtmlElement target = a.target;
				string str = this.gf(target);
				this.lasttime += (long)bmak.rnd.Next(2);
				double num3 = this.get_cf_date(true) - (double)this.start_ts;
				string text = string.Concat(new string[]
				{
					this.me_cnt.ToString(),
					",",
					t.ToString(),
					",",
					num3.ToString(),
					",",
					num.ToString(),
					",",
					num2.ToString()
				});
				if (1 != t)
				{
					text = text + "," + str;
					int which = a.which;
					if (1 != which)
					{
						text = text + "," + which.ToString();
					}
				}
				text += ";";
				this.me_vel = this.me_vel + (double)this.me_cnt + (double)t + num3 + num + num2;
				this.mact += text;
				this.ta += num3;
			}
			if (1 == t)
			{
				this.mme_cnt++;
			}
			else
			{
				this.mduce_cnt++;
			}
			this.me_cnt++;
			if (this.js_post && 3 == t)
			{
				this.aj_type = 1;
				this.bpd();
				this.pd();
				this.ce_js_post = 1;
			}
		}

		// Token: 0x0600004E RID: 78 RVA: 0x00005A18 File Offset: 0x00003C18
		private void cdoa()
		{
			if (this.doe_cnt < this.doe_cnt_lmt && this.doa_throttle < 2)
			{
				double num = this.get_cf_date(true) - (double)this.start_ts;
				string text = "-1";
				string text2 = "-1";
				string text3 = "-1";
				string str = string.Concat(new string[]
				{
					this.doe_cnt.ToString(),
					",",
					num.ToString(),
					",",
					text,
					",",
					text2,
					",",
					text3,
					";"
				});
				this.doact += str;
				this.ta += num;
				this.doe_vel = this.doe_vel + (double)this.doe_cnt + num;
				this.doe_cnt++;
			}
			if (this.js_post && this.doe_cnt > 1 && this.aj_indx_doact < this.aj_lmt_doact)
			{
				this.aj_type = 6;
				this.bpd();
				this.pd();
				this.ce_js_post = 1;
				this.aj_indx_doact++;
			}
			this.doa_throttle++;
		}

		// Token: 0x0600004F RID: 79 RVA: 0x00005B60 File Offset: 0x00003D60
		private void cdma()
		{
			if (this.dme_cnt < this.dme_cnt_lmt && this.dma_throttle < 2)
			{
				double num = this.get_cf_date(true) - (double)this.start_ts;
				int num2 = -1;
				int num3 = -1;
				int num4 = -1;
				int num5 = -1;
				int num6 = -1;
				int num7 = -1;
				int num8 = -1;
				int num9 = -1;
				int num10 = -1;
				string str = string.Concat(new string[]
				{
					this.dme_cnt.ToString(),
					",",
					num.ToString(),
					",",
					num2.ToString(),
					",",
					num3.ToString(),
					",",
					num4.ToString(),
					",",
					num5.ToString(),
					",",
					num6.ToString(),
					",",
					num7.ToString(),
					",",
					num8.ToString(),
					",",
					num9.ToString(),
					",",
					num10.ToString(),
					";"
				});
				this.dmact += str;
				this.ta += num;
				this.dme_vel = this.dme_vel + (double)this.dme_cnt + num;
				this.dme_cnt++;
			}
			if (this.js_post && this.dme_cnt > 1 && this.aj_indx_dmact < this.aj_lmt_dmact)
			{
				this.aj_type = 7;
				this.bpd();
				this.pd();
				this.ce_js_post = 1;
				this.aj_indx_dmact++;
			}
			this.dma_throttle++;
		}

		// Token: 0x06000050 RID: 80 RVA: 0x00005D38 File Offset: 0x00003F38
		private string gf(CommonHtmlElement a)
		{
			string result;
			try
			{
				if (a == null)
				{
					result = "-1";
				}
				else
				{
					string name = a.Name;
					if (!string.IsNullOrEmpty(name) && !(name == "undefined"))
					{
						result = this.ab(name).ToString();
					}
					else
					{
						string id = a.Id;
						result = ((string.IsNullOrEmpty(id) || id == "undefined") ? "-1" : this.ab(id).ToString());
					}
				}
			}
			catch (Exception)
			{
				result = "-1";
			}
			return result;
		}

		// Token: 0x06000051 RID: 81 RVA: 0x00005DD8 File Offset: 0x00003FD8
		private int isIgn(int a, CommonHtmlElement activeElement)
		{
			int result;
			if (activeElement == null)
			{
				result = 0;
			}
			else
			{
				string type = activeElement.Type;
				int num = 1;
				if (type != null)
				{
					if (num != this.get_type(type))
					{
						goto IL_37;
					}
				}
				else if (num != -1)
				{
					goto IL_37;
				}
				int num2;
				if (this.fidcnt > 12)
				{
					if (-2 == a)
					{
						num2 = 1;
						goto IL_38;
					}
				}
				IL_37:
				num2 = 0;
				IL_38:
				result = num2;
			}
			return result;
		}

		// Token: 0x06000052 RID: 82 RVA: 0x00005E20 File Offset: 0x00004020
		private void cka(KeyEventArgs a, int t)
		{
			int num = -1;
			if (this.ke_cnt < this.ke_cnt_lmt)
			{
				num = a.KeyCode;
				int charCode = a.CharCode;
				if (!a.ShiftKey)
				{
				}
				int num2 = a.CtrlKey ? 1 : 0;
				int num3 = a.MetaKey ? 1 : 0;
				if (!a.AltKey)
				{
				}
				double num4 = this.get_cf_date(true) - (double)this.start_ts;
				string text = this.gf(a.Target);
				int num5 = 0;
				int num6;
				if (charCode != 0 && num != 0)
				{
					if (charCode != num)
					{
						num6 = -1;
						goto IL_87;
					}
				}
				num6 = ((num != 0) ? num : charCode);
				IL_87:
				num = num6;
				int num7;
				if (num2 == 0 && num3 == 0 && num7 == 0 && num >= 32)
				{
					num = ((3 != t || num < 32 || num > 126) ? ((num < 33 || num > 47) ? ((num < 112 || num > 123) ? -2 : -4) : -3) : -2);
				}
				if (Convert.ToInt32(text) != this.prevfid)
				{
					this.fidcnt = 0;
					this.prevfid = Convert.ToInt32(text);
				}
				else
				{
					this.fidcnt++;
				}
				if (this.isIgn(num, a.Target) == 0)
				{
					int num8;
					string text2 = string.Concat(new string[]
					{
						this.ke_cnt.ToString(),
						",",
						t.ToString(),
						",",
						num4.ToString(),
						",",
						num.ToString(),
						",",
						num5.ToString(),
						",",
						num8.ToString(),
						",",
						text
					});
					if (!a.IsTrusted)
					{
						text2 += ",0";
					}
					text2 += ";";
					this.kact += text2;
					this.ke_vel = this.ke_vel + (double)this.ke_cnt + (double)t + num4 + (double)num + (double)num8 + (double)Convert.ToInt32(text);
					this.ta += num4;
				}
			}
			this.ke_cnt++;
			if (a.Target == GeneratorStaticDependencies.MailInput)
			{
				this.infGottenE = true;
			}
			if (a.Target == GeneratorStaticDependencies.PasswordInput)
			{
				this.infGottenP = true;
			}
			if (1 == t && (13 == num || 9 == num))
			{
				this.aj_type = 3;
				this.bpd();
				this.pd();
				this.ce_js_post = 1;
			}
		}

		// Token: 0x06000053 RID: 83 RVA: 0x000060A8 File Offset: 0x000042A8
		private void bpd()
		{
			this.sd_debug("<bpd>");
			double num = this.get_cf_date(true);
			double num2 = this.updatet();
			string text = (this.Cookie != null) ? this.Cookie.Value : "2";
			string text2 = this.gd();
			string text3 = "do_en";
			string text4 = "dm_en";
			string text5 = this.navigator.Touch ? "t_en" : "t_dis";
			string text6 = string.Concat(new string[]
			{
				text3,
				",",
				text4,
				",",
				text5
			});
			string text7 = this.getforminfo();
			string text8 = this.getdurl();
			string text9 = this.aj_type.ToString() + "," + this.aj_indx.ToString();
			double num3 = this.ke_vel + this.me_vel + this.doe_vel + this.dme_vel + (double)this.te_vel + (double)this.pe_vel;
			double num4 = this.get_cf_date(true) - (double)this.start_ts;
			double num5 = this.pi(this.d2 / 6.0);
			string text10 = this.fas().ToString();
			string text11 = string.Join(",", new string[]
			{
				(this.ke_vel + 1.0).ToString(),
				(this.me_vel + 1.0).ToString(),
				this.te_vel.ToString(),
				this.doe_vel.ToString(),
				this.dme_vel.ToString(),
				this.pe_vel.ToString(),
				num3.ToString(),
				num2.ToString(),
				this.init_time.ToString(),
				this.start_ts.ToString(),
				this.fpcf.td,
				this.d2.ToString(),
				this.ke_cnt.ToString(),
				this.me_cnt.ToString(),
				num5.ToString(),
				this.pe_cnt.ToString(),
				this.te_cnt.ToString(),
				num4.ToString(),
				this.ta.ToString(),
				this.n_ck,
				text,
				this.ab(text).ToString(),
				this.fpcf.rVal,
				this.fpcf.rCFP,
				text10
			});
			string text12 = this.ab(this.fpcf.fpValstr).ToString();
			string text13 = this.sed();
			string text14 = "";
			string text15 = "";
			this.sensor_data = string.Concat(new string[]
			{
				this.ver.ToString(),
				"-1,2,-94,-100,",
				text2,
				"-1,2,-94,-101,",
				text6,
				"-1,2,-94,-105,",
				this.informinfo,
				"-1,2,-94,-102,",
				text7,
				"-1,2,-94,-108,",
				this.kact,
				"-1,2,-94,-110,",
				this.mact,
				"-1,2,-94,-117,",
				this.tact,
				"-1,2,-94,-111,",
				this.doact,
				"-1,2,-94,-109,",
				this.dmact,
				"-1,2,-94,-114,",
				this.pact,
				"-1,2,-94,-103,",
				this.vcact,
				"-1,2,-94,-112,",
				text8,
				"-1,2,-94,-115,",
				text11,
				"-1,2,-94,-106,",
				text9
			});
			this.sensor_data = string.Concat(new string[]
			{
				this.sensor_data,
				"-1,2,-94,-119,",
				this.mr,
				"-1,2,-94,-122,",
				text13,
				"-1,2,-94,-123,",
				text14,
				"-1,2,-94,-124,",
				text15
			});
			string text16 = this.ab(this.sensor_data).ToString();
			this.sensor_data = string.Concat(new string[]
			{
				this.sensor_data,
				"-1,2,-94,-70,",
				this.fpcf.fpValstr,
				"-1,2,-94,-80,",
				text12,
				"-1,2,-94,-116,",
				this.o9.ToString(),
				"-1,2,-94,-118,",
				text16,
				"-1,2,-94,-121,"
			});
			string text17 = this.od(this.cs, this.api_public_key).Substring(0, 16);
			double num6 = Math.Floor(this.get_cf_date(true) / 3600000.0);
			double num7 = this.get_cf_date(true);
			string text18 = text17 + this.od(num6.ToString(), text17) + this.sensor_data;
			this.sensor_data = string.Concat(new string[]
			{
				text18,
				";",
				(this.get_cf_date(true) - num + (double)bmak.rnd.Next(2, 8)).ToString(),
				";",
				(this.fpcf.rVal == "-1") ? "-1" : bmak.rnd.Next(8, 15).ToString(),
				";",
				(this.get_cf_date(true) - num7).ToString()
			});
		}

		// Token: 0x06000054 RID: 84 RVA: 0x00002241 File Offset: 0x00000441
		private void pd()
		{
			this.apicall_bm();
			this.aj_indx++;
		}

		// Token: 0x06000055 RID: 85 RVA: 0x00006674 File Offset: 0x00004874
		private void apicall_bm()
		{
			if (!Uri.UnescapeDataString(this.Response.Cookies.GetCookies(GeneratorStaticDependencies.HtmlDocument.Url.OriginalString)["_abck"].Value).Contains("=~-1~-1~-1"))
			{
				this.sensor_data = "{\"sensor_data\":\"" + this.sensor_data + "\"}";
				this.patp();
				this.Request.KeepAlive = true;
				this.Request.UserAgent = this.navigator.UserAgent;
				this.Request.AddHeader("Host", "auth.api.sonyentertainmentnetwork.com");
				this.Request.AddHeader(HttpHeader.Origin, "https://auth.api.sonyentertainmentnetwork.com");
				this.Request.AddHeader(HttpHeader.Accept, "*/*");
				this.Request.AddHeader(HttpHeader.Referer, "https://auth.api.sonyentertainmentnetwork.com/login.jsp?service_entity=psn&request_theme=liquid");
				this.Request.AddHeader(HttpHeader.AcceptLanguage, "en-US,en;q=0.9,en-US;q=0.8,en;q=0.7");
				this.Request.AddHeader("Accept-Encoding", "gzip, deflate");
				this.Response = this.Request.Post(GeneratorStaticDependencies.SensorUri, this.sensor_data, "text/plain;charset=UTF-8");
				this.Cookie = this.Response.Cookies.GetCookies(GeneratorStaticDependencies.HtmlDocument.Url.OriginalString)["_abck"];
			}
		}

		// Token: 0x06000056 RID: 86 RVA: 0x00002257 File Offset: 0x00000457
		private void patp()
		{
			this.aj_ss++;
			this.rst = false;
		}

		// Token: 0x06000057 RID: 87 RVA: 0x000067D0 File Offset: 0x000049D0
		private void lvc(int a)
		{
			if (this.vc_cnt < this.vc_cnt_lmt)
			{
				string str = (this.get_cf_date(true) - (double)this.start_ts).ToString();
				string str2 = a.ToString() + "," + str + ";";
				this.vcact += str2;
			}
			this.vc_cnt++;
		}

		// Token: 0x06000058 RID: 88 RVA: 0x0000226E File Offset: 0x0000046E
		public void hmm(MouseEnentArgs a)
		{
			this.cma(a, 1);
		}

		// Token: 0x06000059 RID: 89 RVA: 0x00002278 File Offset: 0x00000478
		public void hc(MouseEnentArgs a)
		{
			this.cma(a, 2);
		}

		// Token: 0x0600005A RID: 90 RVA: 0x00002282 File Offset: 0x00000482
		public void hmd(MouseEnentArgs a)
		{
			this.cma(a, 3);
		}

		// Token: 0x0600005B RID: 91 RVA: 0x0000228C File Offset: 0x0000048C
		public void hmu(MouseEnentArgs a)
		{
			this.cma(a, 4);
		}

		// Token: 0x0600005C RID: 92 RVA: 0x00002296 File Offset: 0x00000496
		public void hkd(KeyEventArgs a)
		{
			this.cka(a, 1);
		}

		// Token: 0x0600005D RID: 93 RVA: 0x000022A0 File Offset: 0x000004A0
		public void hku(KeyEventArgs a)
		{
			this.cka(a, 2);
		}

		// Token: 0x0600005E RID: 94 RVA: 0x000022AA File Offset: 0x000004AA
		public void hkp(KeyEventArgs a)
		{
			this.cka(a, 3);
		}

		// Token: 0x0600005F RID: 95 RVA: 0x00006840 File Offset: 0x00004A40
		public void hvc()
		{
			this.lasttime += (long)bmak.rnd.Next(10000, 15000);
			int a = 1;
			if (this.isHidden)
			{
				this.lvc(0);
				this.hf(false);
				this.isHidden = false;
			}
			else
			{
				this.lvc(a);
				this.hb(false);
				this.isHidden = true;
			}
		}

		// Token: 0x06000060 RID: 96 RVA: 0x000068A8 File Offset: 0x00004AA8
		public void hf(bool bypasaTime)
		{
			if (bypasaTime)
			{
				this.lasttime += (long)bmak.rnd.Next(10000, 15000);
			}
			this.lvc(3);
		}

		// Token: 0x06000061 RID: 97 RVA: 0x000068E4 File Offset: 0x00004AE4
		public void hb(bool bypasaTime)
		{
			if (bypasaTime)
			{
				this.lasttime += (long)bmak.rnd.Next(10000, 15000);
			}
			this.lvc(2);
		}

		// Token: 0x04000010 RID: 16
		private static Random rnd = new Random();

		// Token: 0x04000011 RID: 17
		private double ver = 1.43;

		// Token: 0x04000012 RID: 18
		private int ke_cnt_lmt = 150;

		// Token: 0x04000013 RID: 19
		private int mme_cnt_lmt = 100;

		// Token: 0x04000014 RID: 20
		private int mduce_cnt_lmt = 75;

		// Token: 0x04000015 RID: 21
		private int pme_cnt_lmt = 25;

		// Token: 0x04000016 RID: 22
		private int pduce_cnt_lmt = 25;

		// Token: 0x04000017 RID: 23
		private int tme_cnt_lmt = 25;

		// Token: 0x04000018 RID: 24
		private int tduce_cnt_lmt = 25;

		// Token: 0x04000019 RID: 25
		private int doe_cnt_lmt = 10;

		// Token: 0x0400001A RID: 26
		private int dme_cnt_lmt = 10;

		// Token: 0x0400001B RID: 27
		private int vc_cnt_lmt = 100;

		// Token: 0x0400001C RID: 28
		private int doa_throttle = 0;

		// Token: 0x0400001D RID: 29
		private int dma_throttle = 0;

		// Token: 0x0400001E RID: 30
		private string session_id = "default_session";

		// Token: 0x0400001F RID: 31
		private bool js_post = true;

		// Token: 0x04000020 RID: 32
		private string loc = "";

		// Token: 0x04000021 RID: 33
		private string cf_url = "https://apid.cformanalytics.com/api/v1/attempt";

		// Token: 0x04000022 RID: 34
		private string auth = "";

		// Token: 0x04000023 RID: 35
		private string api_public_key = "afSbep8yjnZUjq3aL010jO15Sawj2VZfdYK8uY90uxq";

		// Token: 0x04000024 RID: 36
		private int aj_lmt_doact = 1;

		// Token: 0x04000025 RID: 37
		private int aj_lmt_dmact = 1;

		// Token: 0x04000026 RID: 38
		private int aj_lmt_tact = 1;

		// Token: 0x04000027 RID: 39
		private int ce_js_post = 0;

		// Token: 0x04000028 RID: 40
		private int init_time = 0;

		// Token: 0x04000029 RID: 41
		private string informinfo = "0,0,0,0,1964,1065,0;1,0,0,0,2090,1084,0;";

		// Token: 0x0400002A RID: 42
		private int prevfid = -1;

		// Token: 0x0400002B RID: 43
		private int fidcnt = 0;

		// Token: 0x0400002C RID: 44
		public string sensor_data = string.Empty;

		// Token: 0x0400002D RID: 45
		private string ins = null;

		// Token: 0x0400002E RID: 46
		private string cns = null;

		// Token: 0x0400002F RID: 47
		private int enGetLoc = 0;

		// Token: 0x04000030 RID: 48
		private int enReadDocUrl = 1;

		// Token: 0x04000031 RID: 49
		private int disFpCalOnTimeout = 0;

		// Token: 0x04000032 RID: 50
		private int xagg = -1;

		// Token: 0x04000033 RID: 51
		private int pen = -1;

		// Token: 0x04000034 RID: 52
		private int wen = -1;

		// Token: 0x04000035 RID: 53
		private int den = 0;

		// Token: 0x04000036 RID: 54
		private string brow = "";

		// Token: 0x04000037 RID: 55
		private string browver = "";

		// Token: 0x04000038 RID: 56
		private string psub = "-";

		// Token: 0x04000039 RID: 57
		private string lang = "-";

		// Token: 0x0400003A RID: 58
		private string prod = "-";

		// Token: 0x0400003B RID: 59
		private int plen = -1;

		// Token: 0x0400003C RID: 60
		private int doadma_en = 0;

		// Token: 0x0400003D RID: 61
		private ArrayList sdfn = new ArrayList();

		// Token: 0x0400003E RID: 62
		private double d2 = 0.0;

		// Token: 0x0400003F RID: 63
		private double d3 = 0.0;

		// Token: 0x04000040 RID: 64
		private int thr = 0;

		// Token: 0x04000041 RID: 65
		private string cs = "0a46G5m17Vrp4o4c";

		// Token: 0x04000042 RID: 66
		private string hn = "unk";

		// Token: 0x04000043 RID: 67
		private double z1 = 0.0;

		// Token: 0x04000044 RID: 68
		private double o9 = 0.0;

		// Token: 0x04000045 RID: 69
		private string vc = "";

		// Token: 0x04000046 RID: 70
		private double y1 = 2016.0;

		// Token: 0x04000047 RID: 71
		private double ta = 0.0;

		// Token: 0x04000048 RID: 72
		private double tst = -1.0;

		// Token: 0x04000049 RID: 73
		private double t_tst = 0.0;

		// Token: 0x0400004A RID: 74
		private string ckie = "_abck";

		// Token: 0x0400004B RID: 75
		private string n_ck = "0";

		// Token: 0x0400004C RID: 76
		private int ckurl = 0;

		// Token: 0x0400004D RID: 77
		private bool bm = false;

		// Token: 0x0400004E RID: 78
		public string mr = "-1";

		// Token: 0x0400004F RID: 79
		private bool altFonts = false;

		// Token: 0x04000050 RID: 80
		private bool rst = false;

		// Token: 0x04000051 RID: 81
		private bool runFonts = true;

		// Token: 0x04000052 RID: 82
		private bool fsp = false;

		// Token: 0x04000053 RID: 83
		private int mn_mc_lmt = 10;

		// Token: 0x04000054 RID: 84
		private int mn_state = 0;

		// Token: 0x04000055 RID: 85
		private int mn_mc_indx = 0;

		// Token: 0x04000056 RID: 86
		private int mn_sen = 0;

		// Token: 0x04000057 RID: 87
		private int mn_tout = 100;

		// Token: 0x04000058 RID: 88
		private int mn_stout = 1000;

		// Token: 0x04000059 RID: 89
		private int mn_ct = 1;

		// Token: 0x0400005A RID: 90
		private string mn_cc = "";

		// Token: 0x0400005B RID: 91
		private int mn_cd = 10000;

		// Token: 0x0400005C RID: 92
		private ArrayList mn_lc = new ArrayList();

		// Token: 0x0400005D RID: 93
		private ArrayList mn_ld = new ArrayList();

		// Token: 0x0400005E RID: 94
		private int mn_lcl = 0;

		// Token: 0x0400005F RID: 95
		private ArrayList mn_al = new ArrayList();

		// Token: 0x04000060 RID: 96
		private ArrayList mn_il = new ArrayList();

		// Token: 0x04000061 RID: 97
		private ArrayList mn_tcl = new ArrayList();

		// Token: 0x04000062 RID: 98
		private ArrayList mn_r = new ArrayList();

		// Token: 0x04000063 RID: 99
		private string mn_abck = "";

		// Token: 0x04000064 RID: 100
		private string mn_psn = "";

		// Token: 0x04000065 RID: 101
		private string mn_ts = "";

		// Token: 0x04000066 RID: 102
		private ArrayList mn_lg = new ArrayList();

		// Token: 0x04000067 RID: 103
		private long start_ts = 0L;

		// Token: 0x04000068 RID: 104
		private string kact = "";

		// Token: 0x04000069 RID: 105
		private int ke_cnt = 0;

		// Token: 0x0400006A RID: 106
		private double ke_vel = 0.0;

		// Token: 0x0400006B RID: 107
		private string mact = "";

		// Token: 0x0400006C RID: 108
		private int mme_cnt = 0;

		// Token: 0x0400006D RID: 109
		private int mduce_cnt = 0;

		// Token: 0x0400006E RID: 110
		private double me_vel = 0.0;

		// Token: 0x0400006F RID: 111
		private string pact = "";

		// Token: 0x04000070 RID: 112
		private int pme_cnt = 0;

		// Token: 0x04000071 RID: 113
		private int pduce_cnt = 0;

		// Token: 0x04000072 RID: 114
		private int pe_vel = 0;

		// Token: 0x04000073 RID: 115
		private string tact = "";

		// Token: 0x04000074 RID: 116
		private int tme_cnt = 0;

		// Token: 0x04000075 RID: 117
		private int tduce_cnt = 0;

		// Token: 0x04000076 RID: 118
		private int te_vel = 0;

		// Token: 0x04000077 RID: 119
		private string doact = "";

		// Token: 0x04000078 RID: 120
		private int doe_cnt = 0;

		// Token: 0x04000079 RID: 121
		private double doe_vel = 0.0;

		// Token: 0x0400007A RID: 122
		private string dmact = "";

		// Token: 0x0400007B RID: 123
		private int dme_cnt = 0;

		// Token: 0x0400007C RID: 124
		private double dme_vel = 0.0;

		// Token: 0x0400007D RID: 125
		private string vcact = "";

		// Token: 0x0400007E RID: 126
		private int vc_cnt = 0;

		// Token: 0x0400007F RID: 127
		private int aj_indx = 0;

		// Token: 0x04000080 RID: 128
		private int aj_ss = 0;

		// Token: 0x04000081 RID: 129
		private int aj_type = -1;

		// Token: 0x04000082 RID: 130
		private int aj_indx_doact = 0;

		// Token: 0x04000083 RID: 131
		private int aj_indx_dmact = 0;

		// Token: 0x04000084 RID: 132
		private int aj_indx_tact = 0;

		// Token: 0x04000085 RID: 133
		private int me_cnt = 0;

		// Token: 0x04000086 RID: 134
		private int pe_cnt = 0;

		// Token: 0x04000087 RID: 135
		private int te_cnt = 0;

		// Token: 0x04000088 RID: 136
		private string _sd_trace = "";

		// Token: 0x04000089 RID: 137
		private long ltval = 0L;

		// Token: 0x0400008A RID: 138
		private bool g1 = false;

		// Token: 0x0400008B RID: 139
		private bool g2 = false;

		// Token: 0x0400008C RID: 140
		private bool infGottenE = false;

		// Token: 0x0400008D RID: 141
		private bool infGottenP = false;

		// Token: 0x0400008E RID: 142
		private fpcf fpcf = new fpcf(false);

		// Token: 0x0400008F RID: 143
		private bool isHidden = false;

		// Token: 0x04000090 RID: 144
		public readonly Navigator navigator = new Navigator(false);

		// Token: 0x04000091 RID: 145
		private bool MrStarted = false;

		// Token: 0x04000092 RID: 146
		private static int MR = 0;
	}
}
